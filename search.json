[{"path":"https://jasenfinch.github.io/metabolyseR/articles/metabolyseR.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Introduction","text":"metabolyseR package provides suite methods encompass three elements metabolomics data analysis: data pre-treatment modelling / data mining correlation analyses package also distinguishes flexibility simplicity required exploratory analyses compared convenience needed complex routine analyses. reflected underlying S4 object-oriented implementations associated methods defined within package. noted useful understand principles involved using metabolyseR exploratory analyses aid extracting wrangling results generated routine analyses. following document provide introduction basic usage package includes create use base classes foundation metabolyseR. focused around applications exploratory routine analyses. detailed information individual analysis elements see associated vignette using: also example quick start analysis vignette provided. issues, bugs errors encountered using package reported . examples shown use abr1 data set metaboData package (?metaboData::abr1). nominal mass flow-injection mass spectrometry (FI-MS) fingerprinting data set plant-pathogen infection time course experiment. examples also include use pipe %>% magrittr package. Firstly load necessary packages:","code":"browseVignettes('metabolyseR') vignette('quick_start','metabolyseR') library(metabolyseR) library(metaboData)"},{"path":"https://jasenfinch.github.io/metabolyseR/articles/metabolyseR.html","id":"parallel-processing","dir":"Articles","previous_headings":"","what":"Parallel processing","title":"Introduction","text":"package supports parallel processing using future package. default, processing metabolyseR done sequentially. However, parallel processing can activated, prior analysis, specifying parallel back-end using plan(). following example specifies using multisession implementation (multiple background R sessions) two worker processes. See future package documentation information types parallel implementations available.","code":"plan(future::multisession,workers = 2)"},{"path":"https://jasenfinch.github.io/metabolyseR/articles/metabolyseR.html","id":"exploratory-analyses","dir":"Articles","previous_headings":"","what":"Exploratory analyses","title":"Introduction","text":"exploratory analyses, simple questions data need answered quickly, requiring steps. Key requirements tool used investigators simple flexible. metabolyseR, AnalysisData class base S4 class provides requirements. following sections give overview basics constructing using objects base analysis.","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/articles/metabolyseR.html","id":"analysis-data","dir":"Articles","previous_headings":"Exploratory analyses","what":"Analysis data","title":"Introduction","text":"can firstly construct AnalysisData object requires two data tables. first metabolomic data columns metabolome features, rows sample observations contains abundance values. second sample meta-information row order match metabolome data table. Using example data, can constructed assigned variable d : abr1$neg negative ionisation mode data abr1$fact corresponding sample information. printing d can view basic information data. can also return numbers samples numbers features respectively using following: data table can extracted using dat method: alternatively, can used assign new data table: sample information table can extracted using sinfo method: similarly used assign new sample information table:","code":"d <- analysisData(data = abr1$neg,                   info = abr1$fact) print(d) ##  ## AnalysisData object containing: ##  ## Samples: 120  ## Features: 2000  ## Info: 9 nSamples(d) ## [1] 120 nFeatures(d) ## [1] 2000 dat(d) ## # A tibble: 120 × 2,000 ##       N1    N2    N3    N4    N5    N6    N7    N8    N9   N10   N11   N12   N13 ##    <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> ##  1     0     0     0     0     0     0     0     0     0     0     0     0     0 ##  2     0     0     0     0     0     0     0     0     0     0     0     0     0 ##  3     0     0     0     0     0     0     0     0     0     0     0     0     0 ##  4     0     0     0     0     0     0     0     0     0     0     0     0     0 ##  5     0     0     0     0     0     0     0     0     0     0     0     0     0 ##  6     0     0     0     0     0     0     0     0     0     0     0     0     0 ##  7     0     0     0     0     0     0     0     0     0     0     0     0     0 ##  8     0     0     0     0     0     0     0     0     0     0     0     0     0 ##  9     0     0     0     0     0     0     0     0     0     0     0     0     0 ## 10     0     0     0     0     0     0     0     0     0     0     0     0     0 ## # ℹ 110 more rows ## # ℹ 1,987 more variables: N14 <dbl>, N15 <dbl>, N16 <dbl>, N17 <dbl>, ## #   N18 <dbl>, N19 <dbl>, N20 <dbl>, N21 <dbl>, N22 <dbl>, N23 <dbl>, ## #   N24 <dbl>, N25 <dbl>, N26 <dbl>, N27 <dbl>, N28 <dbl>, N29 <dbl>, ## #   N30 <dbl>, N31 <dbl>, N32 <dbl>, N33 <dbl>, N34 <dbl>, N35 <dbl>, ## #   N36 <dbl>, N37 <dbl>, N38 <dbl>, N39 <dbl>, N40 <dbl>, N41 <dbl>, ## #   N42 <dbl>, N43 <dbl>, N44 <dbl>, N45 <dbl>, N46 <dbl>, N47 <dbl>, … dat(d) <- abr1$pos d ##  ## AnalysisData object containing: ##  ## Samples: 120  ## Features: 2000  ## Info: 9 sinfo(d) ## # A tibble: 120 × 9 ##    injorder pathcdf              filecdf name.org remark name    rep day   class ##       <int> <fct>                <fct>   <fct>    <fct>  <fct> <int> <fct> <int> ##  1        1 C:/Xcalibur/ANDI-LT… 01.cdf  12_2     ok     12_2      2 2         2 ##  2        2 C:/Xcalibur/ANDI-LT… 02.cdf  13_3     ok     13_4      3 3         3 ##  3        3 C:/Xcalibur/ANDI-LT… 03.cdf  15_4     ok     15_5      5 4         4 ##  4        4 C:/Xcalibur/ANDI-LT… 04.cdf  12_1     ok     12_2      2 1         1 ##  5        5 C:/Xcalibur/ANDI-LT… 05.cdf  12_2     ok     12_2      2 2         2 ##  6        6 C:/Xcalibur/ANDI-LT… 06.cdf  11_1     ok     11_2      1 1         1 ##  7        7 C:/Xcalibur/ANDI-LT… 07.cdf  14_2     ok     14_3      4 2         2 ##  8        8 C:/Xcalibur/ANDI-LT… 08.cdf  11_4     ok     11_5      1 4         4 ##  9        9 C:/Xcalibur/ANDI-LT… 09.cdf  13_H     ok     13_H      3 H         6 ## 10       10 C:/Xcalibur/ANDI-LT… 10.cdf  15_H     ok     15_H      5 H         6 ## # ℹ 110 more rows sinfo(d) <- abr1$fact[,1:2] d ##  ## AnalysisData object containing: ##  ## Samples: 120  ## Features: 2000  ## Info: 2"},{"path":"https://jasenfinch.github.io/metabolyseR/articles/metabolyseR.html","id":"sample-information","dir":"Articles","previous_headings":"Exploratory analyses","what":"Sample information","title":"Introduction","text":"number methods provide utility querying altering sample information within AnalysisData object. methods named prefix cls include: clsAdd clsArrange clsAvailable clsExtract clsRemove clsRename clsReplace names available sample information columns can shown using clsAvailable(). given column can extracted using clsExtract(). , day column extracted. Sample class frequencies computed. can seen 20 samples available class. Another example addition new sample information column. following, column called new_class added samples labelled 1.","code":"clsAvailable(d) ## [1] \"injorder\" \"pathcdf\"  \"filecdf\"  \"name.org\" \"remark\"   \"name\"     \"rep\"      ## [8] \"day\"      \"class\" clsExtract(d,cls = 'day') ##   [1] 2 3 4 1 2 1 2 4 H H 4 5 1 2 H 5 3 3 2 H 4 3 5 4 H H 3 H H 1 1 1 5 5 3 4 H ##  [38] 1 5 5 1 2 4 3 2 4 3 2 5 4 4 H 3 4 2 4 4 1 5 4 4 1 1 H 3 2 H 3 3 1 2 H H 2 ##  [75] 3 5 3 2 5 2 4 3 H 2 3 2 1 1 4 5 3 2 1 H 5 2 4 H 1 4 4 1 1 5 H 5 1 3 3 5 5 ## [112] 5 3 2 5 H 5 H 2 1 ## Levels: 1 2 3 4 5 H clsExtract(d,cls = 'day') %>%   table() ## . ##  1  2  3  4  5  H  ## 20 20 20 20 20 20 d <- clsAdd(d,cls = 'new_class',value = rep(1,nSamples(d))) clsAvailable(d) ##  [1] \"injorder\"  \"pathcdf\"   \"filecdf\"   \"name.org\"  \"remark\"    \"name\"      ##  [7] \"rep\"       \"day\"       \"class\"     \"new_class\""},{"path":"https://jasenfinch.github.io/metabolyseR/articles/metabolyseR.html","id":"keeping-removing-samples-or-features","dir":"Articles","previous_headings":"Exploratory analyses","what":"Keeping / removing samples or features","title":"Introduction","text":"Samples features can easily kept removed AnalysisData object convenient. can seen first 6 sample indexes injorder column sample information. samples kept using: removed using: process similar keeping removing specific metabolome features data table. can seen first 6 feature names data table. features can kept using: remove features:","code":"samples <- d %>%   clsExtract(cls = 'injorder') %>%   head()  print(samples) ## [1] 1 2 3 4 5 6 d %>%   keepSamples(idx = 'injorder',samples = samples) ##  ## AnalysisData object containing: ##  ## Samples: 6  ## Features: 2000  ## Info: 10 d %>%   removeSamples(idx = 'injorder',samples = samples) ##  ## AnalysisData object containing: ##  ## Samples: 114  ## Features: 2000  ## Info: 10 feat <- d %>%   features() %>%   head()  print(feat) ## [1] \"N1\" \"N2\" \"N3\" \"N4\" \"N5\" \"N6\" d %>%   keepFeatures(features = feat) ##  ## AnalysisData object containing: ##  ## Samples: 120  ## Features: 6  ## Info: 10 d %>%   removeFeatures(features = feat) ##  ## AnalysisData object containing: ##  ## Samples: 120  ## Features: 1994  ## Info: 10"},{"path":"https://jasenfinch.github.io/metabolyseR/articles/metabolyseR.html","id":"routine-analyses","dir":"Articles","previous_headings":"","what":"Routine analyses","title":"Introduction","text":"Routine analyses often made numerous steps parameters likely already previously established. emphasis convenience little code possible required. analyses, necessary analysis elements, order parameters first prepared analysis routine subsequently performed single step. section introduce type analysis can performed using metabolyseR include four main topics: analysis parameter selection performing analysis performing re-analysis extracting analysis results","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/articles/metabolyseR.html","id":"analysis-parameters","dir":"Articles","previous_headings":"Routine analyses","what":"Analysis parameters","title":"Introduction","text":"Parameter selection fundamental aspect performing routine analyses using metabolyseR step requiring input user. parameters analysis stored S4 object class AnalysisParameters containing relevant parameters selected analysis elements. parameters named denote functionality commonly across analysis element methods. Discussion specific parameters can found withing vignettes relevant analysis elements. can accessed using: several ways specify parameters use analysis. first programatically second use YAML format.","code":"browseVignettes('metabolyseR')"},{"path":"https://jasenfinch.github.io/metabolyseR/articles/metabolyseR.html","id":"programatic-specification","dir":"Articles","previous_headings":"Routine analyses > Analysis parameters","what":"Programatic specification","title":"Introduction","text":"available analysis elements can shown using: analysisParameters() function can used create AnalysisParameters object containing default parameters. example, code return default parameters metabolyseR analysis elements. retrieve parameters subset analysis elements following can run, returning parameters pre-treatment modelling elements. changeParameter() function can used uniformly change parameters across selected methods. example changes defaults parameters named cls default class day. Alternatively parameters specific analysis elements can targeted using elements argument. following alter cls parameter back class pre-treatment element parameters: Parameters can extracted AnalysisParameters class using parameters() function specified element. analysis element function returning default parameters specific methods. include preTreatmentParameters(), modellingParameters() correlationParameters(). returns list default parameters specified methods shown example modellingParameters() . Refer documentation (?) function sepecific usage details. parameters returned functions can assigned AnalysisParameters object, using parameters()’","code":"analysisElements() ## [1] \"pre-treatment\" \"modelling\"     \"correlations\" p <- analysisParameters() p ## Parameters: ## pre-treatment ##  QC ##      occupancyFilter ##          cls = class ##          QCidx = QC ##          occupancy = 2/3 ##      impute ##          cls = class ##          QCidx = QC ##          occupancy = 2/3 ##          parallel = variables ##          seed = 1234 ##      RSDfilter ##          cls = class ##          QCidx = QC ##          RSDthresh = 50 ##      removeQC ##          cls = class ##          QCidx = QC ##  occupancyFilter ##      maximum ##          cls = class ##          occupancy = 2/3 ##  impute ##      class ##          cls = class ##          occupancy = 2/3 ##          seed = 1234 ##  transform ##      TICnorm ##  ## modelling ##  randomForest ##      cls = class ##      rf = list() ##      reps = 1 ##      binary = FALSE ##      comparisons = list() ##      perm = 0 ##      returnModels = FALSE ##      seed = 1234 ##  ## correlations ##  method = pearson ##  pAdjustMethod = bonferroni ##  corPvalue = 0.05 ##  minCoef = 0 ##  maxCor = Inf p <- analysisParameters(c('pre-treatment','modelling')) p ## Parameters: ## pre-treatment ##  QC ##      occupancyFilter ##          cls = class ##          QCidx = QC ##          occupancy = 2/3 ##      impute ##          cls = class ##          QCidx = QC ##          occupancy = 2/3 ##          parallel = variables ##          seed = 1234 ##      RSDfilter ##          cls = class ##          QCidx = QC ##          RSDthresh = 50 ##      removeQC ##          cls = class ##          QCidx = QC ##  occupancyFilter ##      maximum ##          cls = class ##          occupancy = 2/3 ##  impute ##      class ##          cls = class ##          occupancy = 2/3 ##          seed = 1234 ##  transform ##      TICnorm ##  ## modelling ##  randomForest ##      cls = class ##      rf = list() ##      reps = 1 ##      binary = FALSE ##      comparisons = list() ##      perm = 0 ##      returnModels = FALSE ##      seed = 1234 p <- analysisParameters() changeParameter(p,'cls') <- 'day' p ## Parameters: ## pre-treatment ##  QC ##      occupancyFilter ##          cls = day ##          QCidx = QC ##          occupancy = 2/3 ##      impute ##          cls = day ##          QCidx = QC ##          occupancy = 2/3 ##          parallel = variables ##          seed = 1234 ##      RSDfilter ##          cls = day ##          QCidx = QC ##          RSDthresh = 50 ##      removeQC ##          cls = day ##          QCidx = QC ##  occupancyFilter ##      maximum ##          cls = day ##          occupancy = 2/3 ##  impute ##      class ##          cls = day ##          occupancy = 2/3 ##          seed = 1234 ##  transform ##      TICnorm ##  ## modelling ##  randomForest ##      cls = day ##      rf = list() ##      reps = 1 ##      binary = FALSE ##      comparisons = list() ##      perm = 0 ##      returnModels = FALSE ##      seed = 1234 ##  ## correlations ##  method = pearson ##  pAdjustMethod = bonferroni ##  corPvalue = 0.05 ##  minCoef = 0 ##  maxCor = Inf changeParameter(p,'cls',elements = 'pre-treatment') <- 'class' parameters(p,'correlations') ## $method ## [1] \"pearson\" ##  ## $pAdjustMethod ## [1] \"bonferroni\" ##  ## $corPvalue ## [1] 0.05 ##  ## $minCoef ## [1] 0 ##  ## $maxCor ## [1] Inf modellingParameters('anova') ## $anova ## $anova$cls ## [1] \"class\" ##  ## $anova$pAdjust ## [1] \"bonferroni\" ##  ## $anova$comparisons ## list() ##  ## $anova$returnModels ## [1] FALSE parameters(p,'pre-treatment') <- preTreatmentParameters(   list(     occupancyFilter = 'maximum',     transform = 'TICnorm'       )   )"},{"path":"https://jasenfinch.github.io/metabolyseR/articles/metabolyseR.html","id":"yaml-specification","dir":"Articles","previous_headings":"Routine analyses > Analysis parameters","what":"YAML specification","title":"Introduction","text":"Due relatively complex structure parameters needed analyses containing many components, also possible specify analysis parameters using YAML file format. YAML parameter files (.yaml) can parsed using parseParameters() function. example shows YAML specification defaults returned analysisParameters(). can passed directly AnalysisParameters object using following: complex pre-treatment situations following: multiple steps method needed (remove), numbered sequentially. multiple values also need provided particular argument (e.g. classes = c('H','1')), supplied hyphenated list. Existing AnalysisParameters objects can also exported YAML format shown :","code":"pre-treatment:   QC:     occupancyFilter:       cls: class       QCidx: QC       occupancy: 0.6666667     impute:       cls: class       QCidx: QC       occupancy: 0.6666667       parallel: variables       seed: 1234.0     RSDfilter:       cls: class       QCidx: QC       RSDthresh: 50.0     removeQC:       cls: class       QCidx: QC   occupancyFilter:     maximum:       cls: class       occupancy: 0.6666667   impute:     class:       cls: class       occupancy: 0.6666667       seed: 1234.0   transform:     TICnorm: {} modelling:   randomForest:     cls: class     rf: []     reps: 1.0     binary: no     comparisons: []     perm: 0.0     returnModels: no     seed: 1234.0 correlations:   method: pearson   pAdjustMethod: bonferroni   corPvalue: 0.05   minCoef: 0.0   maxCor: .inf paramFile <- system.file('defaultParameters.yaml',package = 'metabolyseR') p <- parseParameters(paramFile) pre-treatment:   remove:     sample:       idx: fileOrder       samples: 1   remove1:     class:       cls: day       classes:       - H       - 1   occupancyFilter:     maximum:       cls: class       occupancy: 0.667   transform:     TICnorm: ~ p <- analysisParameters() exportParameters(p,file = 'analysis_parameters.yaml')"},{"path":"https://jasenfinch.github.io/metabolyseR/articles/metabolyseR.html","id":"performing-an-analysis","dir":"Articles","previous_headings":"Routine analyses","what":"Performing an analysis","title":"Introduction","text":"analysis performed single step using metabolyse() function. accepts metabolomic data, sample information analysis parameters. metabolomic data table abundance values columns metabolome features rows sample observation. Similarly, sample meta-information table consist observations rows meta information columns. order observation rows sample information table concordant rows metabolomics data table. can run example analysis using abr1 data set first generating default parameters pre-treatment modelling (random forest) analysis elements. Custom pre-treatment parameters can specified inlude occupancy filtering total ion count normalisation. Next cls parameters can changed use day sample information column throughout analysis. Finally, analysis can run single step. fist 200 features negative ionisation mode data specified reduce analysis time needed example. Note: data pre-treatment step performed prior modelling correlation analysis, raw data automatically used. analysis object containing analysis results can printed provide basic information results analysis.","code":"p <- analysisParameters(c('pre-treatment','modelling')) parameters(p,'pre-treatment') <- preTreatmentParameters(   list(   occupancyFilter = 'maximum',   transform = 'TICnorm') ) changeParameter(p,'cls') <- 'day' analysis <- metabolyse(abr1$neg[,1:200],abr1$fact,p) ##  ## metabolyseR  v0.15.1 Tue May 30 14:35:07 2023 ## ________________________________________________________________________________ ## Parameters: ## pre-treatment ##  occupancyFilter ##      maximum ##          cls = day ##          occupancy = 2/3 ##  transform ##      TICnorm ##  ## modelling ##  randomForest ##      cls = day ##      rf = list() ##      reps = 1 ##      binary = FALSE ##      comparisons = list() ##      perm = 0 ##      returnModels = FALSE ##      seed = 1234 ## ________________________________________________________________________________ ##  [34mPre-treatment  [39m…   [34mPre-treatment  [39m     [32m✔ [39m [0.6S] ##  [34mModelling  [39m…  [34m Modelling  [39m  [32m✔ [39m [2.1S] ## ________________________________________________________________________________ ##  ##  [32mComplete!  [39m[2.7S] print(analysis) ##  ## metabolyseR v0.15.1 ## Analysis: ##     Tue May 30 14:35:07 2023 ##  ##  Raw Data: ##      No. samples = 120 ##      No. features = 200 ##  ##  Pre-treated Data: ##      Tue May 30 14:35:07 2023 ##      No. samples = 120 ##      No. features = 48 ##  ##  Modelling: ##      Tue May 30 14:35:09 2023 ##      Methods: randomForest"},{"path":"https://jasenfinch.github.io/metabolyseR/articles/metabolyseR.html","id":"performing-a-re-analysis","dir":"Articles","previous_headings":"Routine analyses","what":"Performing a re-analysis","title":"Introduction","text":"likely occasions analysis need re-analysed using new set parameters. can achieved using reAnalyse() function. example run correlation analysis addition pre-treatment modelling elements already performed. Firstly, can specify correlation parameters: perform re-analysis previously analysed Analysis object, specifying additional parameters. overview results analysis (now including correlations) can printed.","code":"parameters <- analysisParameters('correlations') analysis <- reAnalyse(analysis,parameters) ##  ## metabolyseR v0.15.1 Tue May 30 14:35:10 2023 ## ________________________________________________________________________________ ## Parameters: ## correlations ##  method = pearson ##  pAdjustMethod = bonferroni ##  corPvalue = 0.05 ##  minCoef = 0 ##  maxCor = Inf ## ________________________________________________________________________________ ##  [34mCorrelations  [39m…  [34m Correlations  [39m   [32m✔ [39m [0.1S] ## ________________________________________________________________________________ ##  ## Complete! [0.1S] print(analysis) ##  ## metabolyseR v0.15.1 ## Analysis: ##     Tue May 30 14:35:07 2023 ##  ##  Raw Data: ##      No. samples = 120 ##      No. features = 200 ##  ##  Pre-treated Data: ##      Tue May 30 14:35:07 2023 ##      No. samples = 120 ##      No. features = 48 ##  ##  Modelling: ##      Tue May 30 14:35:09 2023 ##      Methods: randomForest ##  ##  Correlations: ##      Tue May 30 14:35:10 2023 ##      No. correlations = 140"},{"path":"https://jasenfinch.github.io/metabolyseR/articles/metabolyseR.html","id":"extracting-analysis-results","dir":"Articles","previous_headings":"Routine analyses","what":"Extracting analysis results","title":"Introduction","text":"analysis performed metabolyse() returns S4 object class Analysis. number ways extracting analysis results object. Similarly AnalysisData class, dat() sinfo() functions can used extract metabolomics data sample information tables directly either raw pre-treated data. example, extract pre-treated metabolomics data object analysis: extract raw sample information: Alternatively raw preTreated functions can used extract AnalysisData class objects containing metabolomics data sample information raw pre-treated data respectively. Lastly analysisResults function can used extract results analysis elements. following extract modelling results:","code":"dat(analysis,type = 'pre-treated') ## # A tibble: 120 × 48 ##       N113    N115    N117    N118    N119    N127    N128    N129  N130    N131 ##      <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl> <dbl>   <dbl> ##  1 0.00646 0       1.68e-4 0       1.60e-3 0.0323  2.65e-4 2.80e-4     0 0       ##  2 0.0113  7.74e-4 1.02e-3 0       1.43e-3 0.00856 0       3.95e-4     0 0       ##  3 0.00931 6.01e-4 2.70e-3 6.22e-5 5.58e-3 0       0       1.05e-4     0 6.51e-4 ##  4 0.00798 0       0       0       1.62e-4 0.00848 0       4.05e-4     0 1.28e-4 ##  5 0.0105  0       0       0       0       0.00658 0       1.97e-3     0 0       ##  6 0.00454 0       2.48e-4 3.25e-4 5.31e-4 0.00207 0       1.98e-4     0 0       ##  7 0.0117  0       1.14e-3 0       4.39e-4 0.00603 0       4.04e-4     0 0       ##  8 0.00787 2.36e-3 1.43e-3 1.52e-4 4.22e-3 0.00290 2.78e-4 5.76e-5     0 0       ##  9 0.00136 1.87e-4 8.17e-4 1.87e-4 0       0.0610  1.31e-4 5.23e-4     0 0       ## 10 0.00899 4.26e-4 2.06e-3 0       8.36e-4 0.00106 7.72e-4 0           0 0       ## # ℹ 110 more rows ## # ℹ 38 more variables: N132 <dbl>, N133 <dbl>, N134 <dbl>, N135 <dbl>, ## #   N136 <dbl>, N137 <dbl>, N139 <dbl>, N143 <dbl>, N145 <dbl>, N146 <dbl>, ## #   N147 <dbl>, N149 <dbl>, N153 <dbl>, N155 <dbl>, N157 <dbl>, N161 <dbl>, ## #   N163 <dbl>, N164 <dbl>, N165 <dbl>, N168 <dbl>, N169 <dbl>, N170 <dbl>, ## #   N171 <dbl>, N173 <dbl>, N174 <dbl>, N175 <dbl>, N179 <dbl>, N180 <dbl>, ## #   N181 <dbl>, N183 <dbl>, N187 <dbl>, N191 <dbl>, N192 <dbl>, N193 <dbl>, … sinfo(analysis,type = 'raw') ## # A tibble: 120 × 9 ##    injorder pathcdf              filecdf name.org remark name    rep day   class ##       <int> <fct>                <fct>   <fct>    <fct>  <fct> <int> <fct> <int> ##  1        1 C:/Xcalibur/ANDI-LT… 01.cdf  12_2     ok     12_2      2 2         2 ##  2        2 C:/Xcalibur/ANDI-LT… 02.cdf  13_3     ok     13_4      3 3         3 ##  3        3 C:/Xcalibur/ANDI-LT… 03.cdf  15_4     ok     15_5      5 4         4 ##  4        4 C:/Xcalibur/ANDI-LT… 04.cdf  12_1     ok     12_2      2 1         1 ##  5        5 C:/Xcalibur/ANDI-LT… 05.cdf  12_2     ok     12_2      2 2         2 ##  6        6 C:/Xcalibur/ANDI-LT… 06.cdf  11_1     ok     11_2      1 1         1 ##  7        7 C:/Xcalibur/ANDI-LT… 07.cdf  14_2     ok     14_3      4 2         2 ##  8        8 C:/Xcalibur/ANDI-LT… 08.cdf  11_4     ok     11_5      1 4         4 ##  9        9 C:/Xcalibur/ANDI-LT… 09.cdf  13_H     ok     13_H      3 H         6 ## 10       10 C:/Xcalibur/ANDI-LT… 10.cdf  15_H     ok     15_H      5 H         6 ## # ℹ 110 more rows raw(analysis) ##  ## AnalysisData object containing: ##  ## Samples: 120  ## Features: 200  ## Info: 9 preTreated(analysis) ##  ## AnalysisData object containing: ##  ## Samples: 120  ## Features: 48  ## Info: 9 analysisResults(analysis,element = 'modelling') ## $randomForest ##  ## Random forest classification  ##  ## Samples:  120  ## Features:     48  ## Response:     day  ## # comparisons:    1"},{"path":"https://jasenfinch.github.io/metabolyseR/articles/modelling.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Modelling and feature selection","text":"Modelling provides essential data mining step extracting biological information explanatory metabolome features data set relating experimental conditions. metabolyseR provides number univariate multivariate methods data mining. introduction usage metabolyseR exploratory routine analyses, see introduction vignette using: supplement document, quick start example analysis also available vignette: begin, package can loaded using:","code":"vignette('introduction','metabolyseR') vignette('quick_start','metabolyseR') library(metabolyseR) #>  #> Attaching package: 'metabolyseR' #> The following objects are masked from 'package:stats': #>  #>     anova, predict #> The following objects are masked from 'package:base': #>  #>     raw, split"},{"path":"https://jasenfinch.github.io/metabolyseR/articles/modelling.html","id":"example-data","dir":"Articles","previous_headings":"Introduction","what":"Example data","title":"Modelling and feature selection","text":"examples used use abr1 data set metaboData package. nominal mass flow-injection mass spectrometry (FI-MS) fingerprinting data plant-pathogen infection time course experiment. pipe %>% magrittr package also used. example data can loaded using: negative acquisition mode data (abr1$neg) used along sample meta-information (abr1$fact). Create AnalysisData class object, assigned variable d, using following: can seen data set contains total 120 samples 500 features.","code":"library(metaboData) d <- analysisData(abr1$neg[,1:500],abr1$fact) print(d) #>  #> AnalysisData object containing: #>  #> Samples: 120  #> Features: 500  #> Info: 9"},{"path":"https://jasenfinch.github.io/metabolyseR/articles/modelling.html","id":"parallel-processing","dir":"Articles","previous_headings":"Introduction","what":"Parallel processing","title":"Modelling and feature selection","text":"package supports parallel processing using future package. default, processing metabolyseR done seqentially. However, parallel processing can activated, prior analysis, specifying parallel implementation using plan(). following example specifies using multisession implementation (muliple background R sessions) two worker processes. See future package documentation information types parallel implementations available.","code":"plan(future::multisession,workers = 2)"},{"path":"https://jasenfinch.github.io/metabolyseR/articles/modelling.html","id":"random-forest","dir":"Articles","previous_headings":"","what":"Random Forest","title":"Modelling and feature selection","text":"Random forest versatile ensemble machine learning approach based forests decision trees multivariate data mining. can include unsupervised analysis, classification discrete response variables regression continuous responses. Random forest can performed metabolyseR using randomForest() method. details arguments using function, see ?randomForest. implementation random forest metabolyseR utilises randomForest package. See ?randomForest::randomForest information implementation.","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/articles/modelling.html","id":"unsupervised","dir":"Articles","previous_headings":"Random Forest","what":"Unsupervised","title":"Modelling and feature selection","text":"unsupervised random forest approach can useful starting point analysis experimental context. can used give general overview structure data identify possible problems. include situations presence outliers samples splits data caused impact analytical sample preparation factors. Unsupervised random forest can advantages assessments approaches Principle Component Analysis (PCA). less sensitive effect single feature fact little overall impact relative hundreds present data set. examples show use unsupervised random forest assessing general structure example data set presence outlier samples. Unsupervised random forest can performed setting cls argument randomForest() NULL: type random forest performed can checked using type method. printing results object. Firstly, presence outlier samples assessed. multidimensional scaling (MDS) plot can used visualise relative proximity observations, shown following. individual points also labelled injection order enable identification individual samples necessary.  plot , can seen single sample lies outside 95% confidence ellipse. unlikely sample can considered outlier ’s position result underlying class structure opposed differences specific individual sample. structure observations can investigated colouring points different experimental factor. day class column main experimental factor interest experiment.  shows indeed experimental factor interest greatest impact structure data. progression experimental time points obvious across Dimension 1. available feature importance metrics random forest analysis can retrieved : importance values metrics feature can returned using: explanatory features given threshold can extracted importance metrics. following extract explanatory features threshold 0.05 based false positive rate metric. example 359 explanatory features. trend highly ranked explanatory feature day factor can plotted using plotFeature() method.","code":"unsupervised_rf <- d %>%   randomForest(cls = NULL) type(unsupervised_rf) #> [1] \"unsupervised\" unsupervised_rf #>  #> Unsupervised random forest #>  #> Samples:  120  #> Features:     500 plotMDS(unsupervised_rf,         cls = NULL,         label = 'injorder',         labelSize = 3,         title = 'Outlier detection') plotMDS(unsupervised_rf,         cls = 'day') importanceMetrics(unsupervised_rf) #> [1] \"1\"                    \"2\"                    \"false_positive_rate\"  #> [4] \"MeanDecreaseAccuracy\" \"MeanDecreaseGini\"     \"selection_frequency\" importance(unsupervised_rf) #> # A tibble: 3,000 × 3 #>    feature metric                value #>    <chr>   <chr>                 <dbl> #>  1 N1      1                    0      #>  2 N1      2                    0      #>  3 N1      MeanDecreaseAccuracy 0      #>  4 N1      MeanDecreaseGini     0      #>  5 N1      false_positive_rate  0.0238 #>  6 N1      selection_frequency  0      #>  7 N10     1                    0      #>  8 N10     2                    0      #>  9 N10     MeanDecreaseAccuracy 0      #> 10 N10     MeanDecreaseGini     0      #> # ℹ 2,990 more rows unsupervised_rf %>%   explanatoryFeatures(metric = \"false_positive_rate\",                        threshold = 0.05) #> # A tibble: 359 × 3 #>    feature metric                 value #>    <chr>   <chr>                  <dbl> #>  1 N342    false_positive_rate 1.31e-19 #>  2 N161    false_positive_rate 2.34e-16 #>  3 N341    false_positive_rate 6.50e-16 #>  4 N315    false_positive_rate 1.79e-15 #>  5 N367    false_positive_rate 3.47e-14 #>  6 N173    false_positive_rate 9.09e-14 #>  7 N385    false_positive_rate 9.09e-14 #>  8 N133    false_positive_rate 1.52e-12 #>  9 N439    false_positive_rate 1.52e-12 #> 10 N379    false_positive_rate 3.78e-12 #> # ℹ 349 more rows unsupervised_rf %>%   plotFeature(feature = 'N425',               cls = 'day')"},{"path":"https://jasenfinch.github.io/metabolyseR/articles/modelling.html","id":"classification","dir":"Articles","previous_headings":"Random Forest","what":"Classification","title":"Modelling and feature selection","text":"Random forest classification can used assess extent discrimination (difference) classes discrete response variable. includes multinomial (number classes > 2) binary (number classes = 2) comparisons. multinomial situations, suitability multinomial comparison versus multiple binary comparisons can depend experimental context. instance, treatment/control experiment includes multiple time points, multinomial comparison using available classes useful visualise general structure data. However, make extracted explanatory features difficult reason relate individual experimental time point treatment conditions. investigator instead identify binary comparisons relevant biological question focus classification comparisons better select explanatory features.","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/articles/modelling.html","id":"multinomial-comparisons","dir":"Articles","previous_headings":"Random Forest > Classification","what":"Multinomial comparisons","title":"Modelling and feature selection","text":"experiments two classes, multinomial random forest classification can used assess discrimination classes give overview relative structure classes. example data set consists total 6 classes day response variable. Multinomial classification can performed : performance model can assessed using metrics based success bag (OOB) predictions. performance metrics can extracted using: metrics include accuracy, Cohen’s kappa (kap), area receiver operator characteristic curve (roc_auc, ROC-AUC) margin. metric strengths weaknesses depend context classification balance observations classes. shown , class frequencies example balanced 20 observations per class. context, metrics used assess predictive performance model. margin metric difference proportion votes correct class maximum proportion votes classes given observation averaged across observations. positive margin value indicates correct classification values greater 0.2 can considered models strong predictive power. margin also allows extent discrimination discerned even distinct cases accuracy ROC-AUC registering values 1. example, values metrics suggest model showing good predictive performance. can investigated plotting MDS observation proximity values.  shows model able discriminate highly classes 5 H. less able discriminate similar classes H 1 4 5 whose confidence ellipses show high degree overlap. makes sense context experiment adjacent time points likely similar time points end experiment. ROC curves can also plotted shown .  Classes line central dashed line predicted greatest reliability model. plot shows H 1 classes least reliably predicted result close proximity shown MDS plot previously. Importance metrics can used identify metabolome features contribute class discrimination model. available importance metrics model shown . , use false positive rate metric threshold 0.05 identify explanatory features day response variable. shown total 121 explanatory features identified. Within multinomial experiment, also possible specify exact class comparisons include, might suitable compare classes using comparisons argument. specified named list, corresponding cls argument. named element consist vector comparisons, classes compare separated using ~. following specifies two comparisons (H~1~2,H~1~5) day response variable displays performance metrics. MDS ROC curve plots can also plotted simultaneously two comparisons.  Similarly, also possible model multiple response factors single random forest call specifying vector response class information column names cls argument. following, name day response factors analysed performance metrics returned single table. MDS plots can also returned models simultaneously.","code":"d %>%    clsExtract(cls = 'day') %>%    unique() #> [1] 2 3 4 1 H 5 #> Levels: 1 2 3 4 5 H multinomial_rf <- d %>%   randomForest(cls = 'day')  print(multinomial_rf) #>  #> Random forest classification  #>  #> Samples:  120  #> Features:     500  #> Response:     day  #> # comparisons:    1 multinomial_rf %>%   metrics() #> # A tibble: 4 × 5 #>   response comparison  .metric  .estimator .estimate #>   <chr>    <chr>       <chr>    <chr>          <dbl> #> 1 day      1~2~3~4~5~H accuracy multiclass     0.8   #> 2 day      1~2~3~4~5~H kap      multiclass     0.76  #> 3 day      1~2~3~4~5~H margin   NA             0.146 #> 4 day      1~2~3~4~5~H roc_auc  hand_till      0.964 d %>%    clsExtract(cls = 'day') %>%    table() #> . #>  1  2  3  4  5  H  #> 20 20 20 20 20 20 multinomial_rf %>%    plotMDS(cls = 'day') multinomial_rf %>%    plotROC() importanceMetrics(multinomial_rf) #>  [1] \"1\"                    \"2\"                    \"3\"                    #>  [4] \"4\"                    \"5\"                    \"false_positive_rate\"  #>  [7] \"H\"                    \"MeanDecreaseAccuracy\" \"MeanDecreaseGini\"     #> [10] \"selection_frequency\" multinomial_rf %>%   explanatoryFeatures(metric = 'false_positive_rate',                       threshold = 0.05) #> # A tibble: 121 × 5 #>    response comparison  feature metric                 value #>    <chr>    <chr>       <chr>   <chr>                  <dbl> #>  1 day      1~2~3~4~5~H N341    false_positive_rate 1.02e-93 #>  2 day      1~2~3~4~5~H N133    false_positive_rate 7.38e-68 #>  3 day      1~2~3~4~5~H N163    false_positive_rate 3.59e-61 #>  4 day      1~2~3~4~5~H N439    false_positive_rate 1.07e-54 #>  5 day      1~2~3~4~5~H N342    false_positive_rate 3.19e-49 #>  6 day      1~2~3~4~5~H N377    false_positive_rate 3.19e-49 #>  7 day      1~2~3~4~5~H N171    false_positive_rate 6.26e-44 #>  8 day      1~2~3~4~5~H N497    false_positive_rate 6.11e-30 #>  9 day      1~2~3~4~5~H N146    false_positive_rate 2.74e-29 #> 10 day      1~2~3~4~5~H N195    false_positive_rate 7.16e-25 #> # ℹ 111 more rows d %>%   randomForest(cls = 'day',                comparisons = list(day = c('H~1~2',                                           'H~1~5'))) %>%   metrics() #> # A tibble: 8 × 5 #>   response comparison .metric  .estimator .estimate #>   <chr>    <chr>      <chr>    <chr>          <dbl> #> 1 day      H~1~2      accuracy multiclass     0.833 #> 2 day      H~1~2      kap      multiclass     0.75  #> 3 day      H~1~2      margin   NA             0.172 #> 4 day      H~1~2      roc_auc  hand_till      0.906 #> 5 day      H~1~5      accuracy multiclass     0.75  #> 6 day      H~1~5      kap      multiclass     0.625 #> 7 day      H~1~5      margin   NA             0.320 #> 8 day      H~1~5      roc_auc  hand_till      0.909 d %>%   randomForest(cls = 'day',                comparisons = list(day = c('H~1~2',                                           'H~1~5'))) %>%   {plotMDS(.,cls = 'day') +       plotROC(.) +       patchwork::plot_layout(ncol = 1)} d %>%   randomForest(cls = c('name','day')) %>%   metrics() #> Unbalanced classes detected. Stratifying sample size to the smallest class size. #> # A tibble: 8 × 5 #>   response comparison                    .metric  .estimator .estimate #>   <chr>    <chr>                         <chr>    <chr>          <dbl> #> 1 name     11_2~12_2~12_4~13_4~14_4~15_3 accuracy multiclass    0.35   #> 2 name     11_2~12_2~12_4~13_4~14_4~15_3 kap      multiclass    0.212  #> 3 name     11_2~12_2~12_4~13_4~14_4~15_3 margin   NA           -0.0485 #> 4 name     11_2~12_2~12_4~13_4~14_4~15_3 roc_auc  hand_till     0.753  #> 5 day      1~2~3~4~5~H                   accuracy multiclass    0.8    #> 6 day      1~2~3~4~5~H                   kap      multiclass    0.76   #> 7 day      1~2~3~4~5~H                   margin   NA            0.146  #> 8 day      1~2~3~4~5~H                   roc_auc  hand_till     0.964 d %>%   randomForest(cls = c('name','day')) %>%   plotMDS() #> Unbalanced classes detected. Stratifying sample size to the smallest class size."},{"path":"https://jasenfinch.github.io/metabolyseR/articles/modelling.html","id":"binary-comparisons","dir":"Articles","previous_headings":"Random Forest > Classification","what":"Binary comparisons","title":"Modelling and feature selection","text":"may cases preferable analyse class comparisons multiple binary comparisons. possible binary comparisons given response variable can displayed using binaryComparisons() method. shows 15 comparisons day response variable. example use binary comparisons containing H class. binary comparisons can performed using following. run possible binary comparisons, binary = TRUE argument instead used. MDS plots comparison can visualised inspect comparisons.  plots show good separation comparisons except H~1 also shown plot performance metrics . comparisons showing perfect performance accuracy, Cohen’s kappa ROC-AUC metrics well high margin values except H~1 comparison.  explanatory features comparisons can extracted using false positive rate metric cut-threshold 0.05. gives total 251 explanatory features. heatmap explanatory features can plotted show mean relative intensities across experiment time points. , classes also refactored customise order classes x-axis.","code":"binaryComparisons(d,cls = 'day') #>  [1] \"1~2\" \"1~3\" \"1~4\" \"1~5\" \"1~H\" \"2~3\" \"2~4\" \"2~5\" \"2~H\" \"3~4\" \"3~5\" \"3~H\" #> [13] \"4~5\" \"4~H\" \"5~H\" binary_comparisons <- binaryComparisons(d,cls = 'day') %>%    .[stringr::str_detect(.,'H')] binary_rf <- d %>%   randomForest(cls = 'day',                comparisons = list(day = binary_comparisons))  print(binary_rf) #>  #> Random forest classification  #>  #> Samples:  120  #> Features:     500  #> Response:     day  #> # comparisons:    5 binary_rf %>%    plotMDS(cls = 'day') binary_rf %>%    plotMetrics() binary_rf %>%    explanatoryFeatures(metric = 'false_positive_rate',                       threshold = 0.05) #> # A tibble: 251 × 5 #>    response comparison feature metric                 value #>    <chr>    <chr>      <chr>   <chr>                  <dbl> #>  1 day      2~H        N341    false_positive_rate 7.34e-52 #>  2 day      2~H        N439    false_positive_rate 1.80e-45 #>  3 day      3~H        N342    false_positive_rate 2.71e-39 #>  4 day      2~H        N327    false_positive_rate 1.06e-35 #>  5 day      3~H        N439    false_positive_rate 1.06e-35 #>  6 day      2~H        N477    false_positive_rate 1.60e-34 #>  7 day      3~H        N377    false_positive_rate 1.60e-34 #>  8 day      4~H        N477    false_positive_rate 7.40e-34 #>  9 day      2~H        N447    false_positive_rate 6.48e-30 #> 10 day      3~H        N163    false_positive_rate 6.48e-30 #> # ℹ 241 more rows refactor_cls <- clsExtract(binary_rf,                            cls = 'day') %>%    factor(.,levels = c('H','1','2','3','4','5'))  binary_rf <- clsReplace(binary_rf,                         value = refactor_cls,                         cls = 'day') binary_rf %>%    plotExplanatoryHeatmap(metric = 'false_positive_rate',                       threshold = 0.05,                       featureNames = TRUE)"},{"path":"https://jasenfinch.github.io/metabolyseR/articles/modelling.html","id":"regression","dir":"Articles","previous_headings":"Random Forest","what":"Regression","title":"Modelling and feature selection","text":"Random forest regression can used assess extent association metabolomic data continuous response variables. example, extent association injection order example data assessed. regression model performance metrics, based OOB prediction error, can extracted using following: regression metrics include R2 (rsq), mean absolute error (mae), mean absolute percentage error (mape), root mean squared error (rmse) concordance correlation coefficient (ccc). R2 concordance correlation coefficient metrics suggest association features injection order, although weak. agreement mean absolute error metric shows average, injection order predicted accuracy 23 injection order positions. MDS plot belows relative proximities samples based injection order regression model. shows part, little correspondence sample positions injection order. However, small grouping samples towards end run around sample ~99 120. suggests analytical issues, certain features, towards end mass spectral analytical run.  available feature importance metrics regression model can listed. feature importance metrics can plotted give overview distribution. following plot percentage increase mean squared error (%IncMSE) importance metric.  shows features contributing association injection order. explanatory features can extracted following, using threshold 5. returned total 7 explanatory features threshold. top ranked feature N283 can plotted investigate ’s trend relation injection order.  shows increase intensity feature samples 100 injection order corresponds cluster seen MDS plot .","code":"regression_rf <- d %>%    randomForest(cls = 'injorder')  print(regression_rf) #>  #> Random forest regression  #>  #> Samples:  120  #> Features:     500  #> Response:     injorder regression_rf %>%    metrics() #> # A tibble: 5 × 4 #>   response .metric .estimator .estimate #>   <chr>    <chr>   <chr>          <dbl> #> 1 injorder ccc     standard       0.513 #> 2 injorder mae     standard      23.5   #> 3 injorder mape    standard     154.    #> 4 injorder rmse    standard      26.5   #> 5 injorder rsq     standard       0.476 regression_rf %>%    plotMDS(cls = NULL,           ellipses = FALSE,           label = 'injorder',           labelSize = 3) regression_rf %>%    importanceMetrics() #> [1] \"%IncMSE\"       \"IncNodePurity\" regression_rf %>%    plotImportance(metric = \"%IncMSE\",                   rank = FALSE) regression_rf %>%    explanatoryFeatures(metric = '%IncMSE',                       threshold = 5) #> # A tibble: 7 × 4 #>   response feature metric  value #>   <chr>    <chr>   <chr>   <dbl> #> 1 injorder N283    %IncMSE 19.9  #> 2 injorder N135    %IncMSE  8.71 #> 3 injorder N451    %IncMSE  5.58 #> 4 injorder N161    %IncMSE  5.51 #> 5 injorder N306    %IncMSE  5.49 #> 6 injorder N118    %IncMSE  5.22 #> 7 injorder N297    %IncMSE  5.07 regression_rf %>%    plotFeature(feature = 'N283',               cls = 'injorder')"},{"path":"https://jasenfinch.github.io/metabolyseR/articles/modelling.html","id":"univariate-analyses","dir":"Articles","previous_headings":"","what":"Univariate analyses","title":"Modelling and feature selection","text":"Univariate methods select features, explanatory response variables, features tested individual basis. methods offer simplicity easy interpretation use, however provide information features may interact. univariate methods currently available metabolyseR include Welch’s t-test, analysis variance (ANOVA) linear regression. following sections provide brief examples use methods.","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/articles/modelling.html","id":"welchs-t-test","dir":"Articles","previous_headings":"Univariate analyses","what":"Welch’s t-test","title":"Modelling and feature selection","text":"Welch’s t-test can used select explanatory metabolome features binary comparisons discrete variables. default, possible binary comparisons categories response variable tested. shows possible binary comparisons day response variable example data set. following example, subset comparisons tested. selected supplying list comparisons argument. explanatory features show significant difference response categories can extracted shown . threshold features based adjusted p-value, found adjusted.p.value column table. results features can returned using importance() method. heat map explanatory features can plotted inspect relative trends explanatory features relation response variable.","code":"binaryComparisons(d,                   cls = 'day') #>  [1] \"1~2\" \"1~3\" \"1~4\" \"1~5\" \"1~H\" \"2~3\" \"2~4\" \"2~5\" \"2~H\" \"3~4\" \"3~5\" \"3~H\" #> [13] \"4~5\" \"4~H\" \"5~H\" ttest_analysis <- ttest(d,                         cls = 'day',                         comparisons = list(day = c('H~1',                                                    'H~2',                                                    'H~5')))  print(ttest_analysis) #>  #> Univariate t-test analysis #>  #> Samples:  120  #> Features:     500  #> Responses:    day  #> # comparisons:    3 explanatoryFeatures(ttest_analysis,                     threshold = 0.05) #> # A tibble: 73 × 14 #>    response comparison feature estimate estimate1 estimate2 statistic  p.value #>    <chr>    <chr>      <chr>      <dbl>     <dbl>     <dbl>     <dbl>    <dbl> #>  1 day      H~5        N163      -735.       19.5   755.       -13.8  1.43e-11 #>  2 day      H~5        N341      2445.     2537.     92.6       13.6  2.88e-11 #>  3 day      H~5        N133      1055.     1077.     21.9       13.0  5.44e-11 #>  4 day      H~2        N341       200.      293.     92.6       10.6  1.38e-10 #>  5 day      H~5        N171        62.6      64.7     2.15      11.9  2.62e-10 #>  6 day      H~5        N119        17.2      17.9     0.763     11.0  8.54e-10 #>  7 day      H~5        N342       243.      247.      4.13      10.8  1.42e- 9 #>  8 day      H~5        N343        27.4      28.3     0.961      9.83 5.99e- 9 #>  9 day      H~5        N377       152.      157.      5.05       9.81 6.75e- 9 #> 10 day      H~5        N477       103.      129.     26.1        9.30 1.05e- 8 #> # ℹ 63 more rows #> # ℹ 6 more variables: parameter <dbl>, conf.low <dbl>, conf.high <dbl>, #> #   method <chr>, alternative <chr>, adjusted.p.value <dbl> plotExplanatoryHeatmap(ttest_analysis)"},{"path":"https://jasenfinch.github.io/metabolyseR/articles/modelling.html","id":"anova","dir":"Articles","previous_headings":"Univariate analyses","what":"ANOVA","title":"Modelling and feature selection","text":"ANOVA can used select explanatory features discrete response variables 3 categories. following example compare categories day response variable. However, comparisons argument can used select particular comparisons interest. explanatory features significantly different categories can extracted. top ranked explanatory feature N341 can plotted inspect ’s trend relative day response variable.","code":"anova_analysis <- anova(d,                         cls = 'day')  print(anova_analysis) #>  #> Univariate ANOVA analysis #>  #> Samples:  120  #> Features:     500  #> Responses:    day  #> # comparisons:    1 explanatoryFeatures(anova_analysis,                     threshold = 0.05) #> # A tibble: 110 × 10 #>    response comparison  feature term        df   sumsq meansq statistic  p.value #>    <chr>    <chr>       <chr>   <chr>    <dbl>   <dbl>  <dbl>     <dbl>    <dbl> #>  1 day      1~2~3~4~5~H N341    response     5  1.09e8 2.17e7     124.  1.90e-44 #>  2 day      1~2~3~4~5~H N163    response     5  1.25e7 2.51e6     113.  1.71e-42 #>  3 day      1~2~3~4~5~H N133    response     5  1.96e7 3.92e6     108.  1.71e-41 #>  4 day      1~2~3~4~5~H N171    response     5  6.29e4 1.26e4      88.8 1.16e-37 #>  5 day      1~2~3~4~5~H N342    response     5  1.04e6 2.07e5      85.1 7.61e-37 #>  6 day      1~2~3~4~5~H N343    response     5  1.19e4 2.38e3      66.1 4.43e-32 #>  7 day      1~2~3~4~5~H N119    response     5  4.92e3 9.83e2      53.8 2.07e-28 #>  8 day      1~2~3~4~5~H N497    response     5  1.10e5 2.20e4      49.6 4.83e-27 #>  9 day      1~2~3~4~5~H N137    response     5  6.32e3 1.26e3      39.9 1.59e-23 #> 10 day      1~2~3~4~5~H N277    response     5  6.31e4 1.26e4      39.1 3.14e-23 #> # ℹ 100 more rows #> # ℹ 1 more variable: adjusted.p.value <dbl> plotFeature(anova_analysis,             feature = 'N341',             cls = 'day')"},{"path":"https://jasenfinch.github.io/metabolyseR/articles/modelling.html","id":"linear-regression","dir":"Articles","previous_headings":"Univariate analyses","what":"Linear regression","title":"Modelling and feature selection","text":"Univariate linear regression can used associate continuous response variable metabolome features. example , example data regressed injection order identify linearly associated metabolome features. explanatory features can extracted. top ranked explanatory feature N283 can plotted inspect inspects ’s association injection order.","code":"lr_analysis <- linearRegression(d,                                 cls = 'injorder')  print(lr_analysis) #>  #> Univariate linear regression analysis #>  #> Samples:  120  #> Features:     500  #> Responses:    injorder explanatoryFeatures(lr_analysis) #> # A tibble: 8 × 15 #>   response feature r.squared adj.r.squared sigma statistic  p.value    df logLik #>   <chr>    <chr>       <dbl>         <dbl> <dbl>     <dbl>    <dbl> <dbl>  <dbl> #> 1 injorder N283        0.310         0.304  4.27      53.0 4.10e-11     1  -343. #> 2 injorder N135        0.165         0.157 78.7       23.2 4.31e- 6     1  -693. #> 3 injorder N221        0.140         0.133  5.87      19.3 2.50e- 5     1  -382. #> 4 injorder N473        0.135         0.127  7.24      18.3 3.78e- 5     1  -407. #> 5 injorder N335        0.132         0.124 20.1       17.9 4.59e- 5     1  -529. #> 6 injorder N452        0.120         0.112  4.00      16.0 1.10e- 4     1  -335. #> 7 injorder N255        0.119         0.111 11.1       15.9 1.17e- 4     1  -458. #> 8 injorder N267        0.118         0.111 26.4       15.8 1.22e- 4     1  -562. #> # ℹ 6 more variables: AIC <dbl>, BIC <dbl>, deviance <dbl>, df.residual <int>, #> #   nobs <int>, adjusted.p.value <dbl> plotFeature(lr_analysis,             feature = 'N283',             cls = 'injorder')"},{"path":"https://jasenfinch.github.io/metabolyseR/articles/modelling.html","id":"routine-analyses","dir":"Articles","previous_headings":"","what":"Routine analyses","title":"Modelling and feature selection","text":"routine analyses, initial analysis parameters pre-treatment data modelling can selected. specific parameters pre-treatment example data can declared using following. modellingMethods() function can used list modelling methods currently available metabolyseR. modellingParameters() function can used retrieve default parameters specific modelling methods. , default modelling parameters randomForest ttest methods specified. class parameters can universily specified pre-treatment modelling elements. example, day response variable used just H 2 classes. gives following parameters analysis. analysis can executed. results modelling can specifically extracted using following. returns results list containing modelling results objects specified method. Alternatively, modelling results can assess directly Analysis object. shows extraction explanatory features, using default parameters method, results returned single table. Heat maps explanatory features can also plotted modelling methods.","code":"p <- analysisParameters(c('pre-treatment','modelling')) parameters(p,'pre-treatment') <- preTreatmentParameters(   list(     keep = 'classes',     occupancyFilter = 'maximum',     transform = 'TICnorm'    ) ) modellingMethods() #> [1] \"anova\"            \"ttest\"            \"linearRegression\" \"randomForest\" parameters(p,'modelling') <- modellingParameters(c('randomForest','ttest')) changeParameter(p,'cls') <- 'day' changeParameter(p,'classes') <- c('H','2') p #> Parameters: #> pre-treatment #>  keep #>      classes #>          cls = day #>          classes = c(\"H\", \"2\") #>  occupancyFilter #>      maximum #>          cls = day #>          occupancy = 2/3 #>  transform #>      TICnorm #>  #> modelling #>  randomForest #>      cls = day #>      rf = list() #>      reps = 1 #>      binary = FALSE #>      comparisons = list() #>      perm = 0 #>      returnModels = FALSE #>      seed = 1234 #>  ttest #>      cls = day #>      pAdjust = bonferroni #>      comparisons = list() #>      returnModels = FALSE analysis <- metabolyse(abr1$neg,abr1$fact,p) #>  [34m #> metabolyseR  [39m  [31mv0.15.1 [39m Tue May 30 14:36:16 2023 #> ________________________________________________________________________________ #>  [33m [33mParameters: [33m [39m #> pre-treatment #>  keep #>      classes #>          cls = day #>          classes = c(\"H\", \"2\") #>  occupancyFilter #>      maximum #>          cls = day #>          occupancy = 2/3 #>  transform #>      TICnorm #>  #> modelling #>  randomForest #>      cls = day #>      rf = list() #>      reps = 1 #>      binary = FALSE #>      comparisons = list() #>      perm = 0 #>      returnModels = FALSE #>      seed = 1234 #>  ttest #>      cls = day #>      pAdjust = bonferroni #>      comparisons = list() #>      returnModels = FALSE #> ________________________________________________________________________________ #>  [34mPre-treatment  [39m…   [34mPre-treatment  [39m     [32m✔ [39m [4.6S] #>  [34mModelling  [39m…  [34m Modelling  [39m  [32m✔ [39m [9.7S] #> ________________________________________________________________________________ #>  #>  [32mComplete!  [39m[14.4S] analysisResults(analysis,'modelling') #> $randomForest #>  #> Random forest classification  #>  #> Samples:  40  #> Features:     1713  #> Response:     day  #> # comparisons:    1  #>  #>  #> $ttest #>  #> Univariate t-test analysis #>  #> Samples:  40  #> Features:     1713  #> Responses:    day  #> # comparisons:    1 explanatory_features <- analysis %>%    explanatoryFeatures()  print(explanatory_features) #> # A tibble: 100 × 17 #>    Method       response comparison feature metric      value estimate estimate1 #>    <chr>        <chr>    <chr>      <chr>   <chr>       <dbl>    <dbl>     <dbl> #>  1 randomForest day      2~H        N341    false_p… 8.06e-28       NA        NA #>  2 randomForest day      2~H        N377    false_p… 5.70e-18       NA        NA #>  3 randomForest day      2~H        N447    false_p… 5.70e-18       NA        NA #>  4 randomForest day      2~H        N579    false_p… 5.70e-18       NA        NA #>  5 randomForest day      2~H        N1084   false_p… 1.19e-16       NA        NA #>  6 randomForest day      2~H        N327    false_p… 2.33e-15       NA        NA #>  7 randomForest day      2~H        N580    false_p… 4.32e-14       NA        NA #>  8 randomForest day      2~H        N1083   false_p… 7.49e-13       NA        NA #>  9 randomForest day      2~H        N1085   false_p… 7.49e-13       NA        NA #> 10 randomForest day      2~H        N503    false_p… 7.49e-13       NA        NA #> # ℹ 90 more rows #> # ℹ 9 more variables: estimate2 <dbl>, statistic <dbl>, p.value <dbl>, #> #   parameter <dbl>, conf.low <dbl>, conf.high <dbl>, method <chr>, #> #   alternative <chr>, adjusted.p.value <dbl> plotExplanatoryHeatmap(analysis) %>%    patchwork::wrap_plots()"},{"path":"https://jasenfinch.github.io/metabolyseR/articles/pre_treatment.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Metabolomics data pre-treatment","text":"Metabolomics data analytical technique requires various data pre-treatment steps prior subsequent data mining downstream analyses. aids data quality integrity. important appropriate pre-treatment strategies used analytical technique applied also suitable statistical machine learning analyses utilised. Careful consideration pre-treatment steps undertaken required can substantial influence results inferences taken metabolomic analyses. Data pre-treatment faceted aspect analysis elements metabolyseR. made number elements, made methods. following document outline application pre-treatment elements use exploratory analyses outline apply routine analyses. introduction usage metabolyseR exploratory routine analyses, see introduction vignette using: supplement document, quick start example analysis also available vignette: begin, package can loaded using:","code":"vignette('introduction','metabolyseR') vignette('quick_start','metabolyseR') library(metabolyseR) #>  #> Attaching package: 'metabolyseR' #> The following objects are masked from 'package:stats': #>  #>     anova, predict #> The following objects are masked from 'package:base': #>  #>     raw, split"},{"path":"https://jasenfinch.github.io/metabolyseR/articles/pre_treatment.html","id":"example-data","dir":"Articles","previous_headings":"Introduction","what":"Example data","title":"Metabolomics data pre-treatment","text":"examples used use abr1 data set metaboData package. nominal mass flow-injection mass spectrometry (FI-MS) fingerprinting data plant-pathogen infection time course experiment. pipe %>% magrittr package also used. example data can loaded using: negative acquisition mode data (abr1$neg) used along sample meta-information (abr1$fact). Create AnalysisData class object, assigned variable d, using following: can seen data set contains total 120 samples 2000 features.","code":"library(metaboData) d <- analysisData(abr1$neg,abr1$fact) print(d) #>  #> AnalysisData object containing: #>  #> Samples: 120  #> Features: 2000  #> Info: 9"},{"path":"https://jasenfinch.github.io/metabolyseR/articles/pre_treatment.html","id":"parallel-processing","dir":"Articles","previous_headings":"Introduction","what":"Parallel processing","title":"Metabolomics data pre-treatment","text":"package supports parallel processing using future package. default, processing metabolyseR done seqentially. However, parallel processing can activated, prior analysis, specifying parallel implementation using plan(). following example specifies using multisession implementation (muliple background R sessions) two worker processes. See future package documentation information types parallel implementations available.","code":"plan(future::multisession,workers = 2)"},{"path":"https://jasenfinch.github.io/metabolyseR/articles/pre_treatment.html","id":"pre-treatment-elements","dir":"Articles","previous_headings":"","what":"Pre-treatment elements","title":"Metabolomics data pre-treatment","text":"following sections outline numerous pre-treatment elements available within metabolyseR. examples application exploratory analyses along useful visualisations. can aid interpretation particular treatments applied well effect used.","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/articles/pre_treatment.html","id":"removal-of-samples-classes-or-features","dir":"Articles","previous_headings":"Pre-treatment elements","what":"Removal of samples, classes or features","title":"Metabolomics data pre-treatment","text":"many situations, necessary exclude either individual samples, sample classes certain features analysis. Individual samples can removed using removeSamples() , idx argument stipulates sample information column cotaining sample indexes samples argument vector sample indexes remove. removeClasses function can used similarly remove whole classes analysis: following enable removal specified features vector supplied features argument: occasions numbers samples, classes features remove greater numbers samples, classes features retained. situations convenient directly specify samples, classes features retain. Keeping samples, classes features outlined following section.","code":"d %>%   removeSamples(idx = 'injorder',samples = 1) #>  #> AnalysisData object containing: #>  #> Samples: 119  #> Features: 2000  #> Info: 9 d %>%   removeClasses(cls = 'day',classes = 'H') #>  #> AnalysisData object containing: #>  #> Samples: 100  #> Features: 2000  #> Info: 9 d %>%   removeFeatures(features = c('N1','N2')) #>  #> AnalysisData object containing: #>  #> Samples: 120  #> Features: 1998  #> Info: 9"},{"path":"https://jasenfinch.github.io/metabolyseR/articles/pre_treatment.html","id":"keeping-samples-classes-or-features","dir":"Articles","previous_headings":"Pre-treatment elements","what":"Keeping samples, classes or features","title":"Metabolomics data pre-treatment","text":"Often necessary retain particular samples, sample classes certain features analysis. Individual samples can kept using keepSamples() , idx argument stipulates sample information column cotaining sample indexes samples argument, vector sample indexes keep. keepClasses() method can used similarly keep whole classes analysis: following specify features keep, vector feature names supplied features argument: likely occasions numbers samples, classes features keep greater numbers samples, classes features excluded. situations convenient directly specify samples, classes features remove. Removing samples, classes features outlined previous section.","code":"d %>%   keepSamples(idx = 'injorder',samples = 1) #>  #> AnalysisData object containing: #>  #> Samples: 1  #> Features: 2000  #> Info: 9 d %>%   keepClasses(cls = 'day',classes = 'H') #>  #> AnalysisData object containing: #>  #> Samples: 20  #> Features: 2000  #> Info: 9 d %>%   keepFeatures(features = c('N1','N2')) #>  #> AnalysisData object containing: #>  #> Samples: 120  #> Features: 2  #> Info: 9"},{"path":"https://jasenfinch.github.io/metabolyseR/articles/pre_treatment.html","id":"feature-filtering-based-on-occupancy","dir":"Articles","previous_headings":"Pre-treatment elements","what":"Feature filtering based on occupancy","title":"Metabolomics data pre-treatment","text":"Occupancy provides useful metric filter poorly represented features (features containing majority zero missing values). occupancy threshold provides means specifying majority variables threshold excluded analyses. However, can complicated underlying class structure present within data variable may well represented within one class another. proportional occupancy feature within data set given class structure can calculated using occupancy() method, specifying sample information column using cls argument. Alternatively occupancy distributions can plotted providing useful overview data set:  can seen number unoccupied features across sample classes small rise density distribution near 0. two strategies thresholding occupancy. first maximum theshold; maximum occupancy across classes threshold. Therefore, feature retained, single class needs occupancy threshold. strategy appropriate applications. two-thirds maximum occupancy filter can applied day sample information column data using: can seen removes 240 features. Plotting occupancy distributions shows low occupancy features now removed.  alternative strategy applying minimum threshold; minimum occupancy across classes required threshold. Therefore, feature retained, classes need occupancy threshold. two-thirds minimum occupancy filter can applied day sample information column data using: can seen removes 344 features.","code":"d %>%   occupancy(cls = 'day') #> # A tibble: 11,914 × 5 #>    day   Feature     N `Class total` Occupancy #>    <fct> <chr>   <dbl>         <int>     <dbl> #>  1 1     N1          0            20         0 #>  2 1     N10         0            20         0 #>  3 1     N100        0            20         0 #>  4 1     N1000      20            20         1 #>  5 1     N1001      20            20         1 #>  6 1     N1002      20            20         1 #>  7 1     N1003      20            20         1 #>  8 1     N1004      20            20         1 #>  9 1     N1005      20            20         1 #> 10 1     N1006      20            20         1 #> # ℹ 11,904 more rows d %>%   plotOccupancy(cls = 'day') maximum_occupancy_filtered <- d %>%   occupancyMaximum(cls = 'day',occupancy = 2/3) print(maximum_occupancy_filtered) #>  #> AnalysisData object containing: #>  #> Samples: 120  #> Features: 1760  #> Info: 9 maximum_occupancy_filtered %>%   plotOccupancy(cls = 'day') minimum_occupancy_filtered <- d %>%   occupancyMinimum(cls = 'day',occupancy = 2/3) print(minimum_occupancy_filtered) #>  #> AnalysisData object containing: #>  #> Samples: 120  #> Features: 1656  #> Info: 9"},{"path":"https://jasenfinch.github.io/metabolyseR/articles/pre_treatment.html","id":"data-transformation","dir":"Articles","previous_headings":"Pre-treatment elements","what":"Data transformation","title":"Metabolomics data pre-treatment","text":"Prior downstream analyses, metabolomics data often require transformation fulfill assumptions particular statistical/data mining technique. wide range transformation methods available commonly used analysis metabolomics data. methods named prefix transform. effects transformation data set can assessed using supervised classifcation approach. following performs supervised random forest analysis example data plots results using multidimensional scaling (MDS) reciever operator characteristic (ROC) curves.  Alternatively log10 transformation can applied prior analysis:  total ion count (TIC) normalisation individual sample corrected TIC. one method can used account small variablility sample concentration.  margin value metric can used assess model perfomance. Positive values indicate models ability, average, correctly predict class labels analysed data. can seen plots , transformations little effect overall structure data set. However, small increases margins transformed data (model improvement). Note , non-parametric machine learning approach applied assess effects transformations data. Using different approach parametric analysis variance (ANOVA) different underlying assumptions likely give different results assessment .","code":"d %>%   plotSupervisedRF(cls = 'day') d %>%   transformLog10() %>%   plotSupervisedRF(cls = 'day') d %>%   transformTICnorm() %>%   plotSupervisedRF(cls = 'day')"},{"path":"https://jasenfinch.github.io/metabolyseR/articles/pre_treatment.html","id":"sample-aggregation","dir":"Articles","previous_headings":"Pre-treatment elements","what":"Sample aggregation","title":"Metabolomics data pre-treatment","text":"Sample aggregation allows electronic pooling samples based grouping variables. useful situations presence technical replicates can aggregated reduce effects pseudo replication. metabolyseR provides methods mean, median sum aggregation starts aggregate prefix. shows principle component analysis (PCA) plot example data coloured classes day sample information column. first maximum occupancy filtered remove empty features.  example shows mean aggregation data using experimental factors within day class sample information columns. PCA plot shows class averages data.","code":"d %>%   occupancyMaximum(cls = 'day') %>%   plotPCA(cls = 'day') day_mean <- d %>%   occupancyMaximum(cls = 'day') %>%   aggregateMean(cls = c('day','class')) plotPCA(day_mean,cls = 'day',ellipses = FALSE)"},{"path":"https://jasenfinch.github.io/metabolyseR/articles/pre_treatment.html","id":"batchblock-correction","dir":"Articles","previous_headings":"Pre-treatment elements","what":"Batch/block correction","title":"Metabolomics data pre-treatment","text":"can sometimes artificial batch related variability introduced metabolomics analyses result analytical instrumentation sample preparation. appropriate sample randomisation (see section feature filtering based QC samples), batch related variability can corrected using average centring correction method, applied individual features. plot shows differences TIC distributions classes day sample information column.  data can corrected class average centring shown . plot TICs shows inter-class variability removed intra-class variability retained.","code":"d %>%   plotTIC(by = 'day',colour = 'day') corrected_data <- d %>%   correctionCenter(block = 'day',type = 'median') plotTIC(corrected_data,         by = 'day',         colour = 'day')"},{"path":"https://jasenfinch.github.io/metabolyseR/articles/pre_treatment.html","id":"imputation-of-missing-data","dir":"Articles","previous_headings":"Pre-treatment elements","what":"Imputation of missing data","title":"Metabolomics data pre-treatment","text":"Missing values can important influence downstream analyses zero values heavily influencing outcomes parametric tests. imputed important considerations highly related variable occupancy. methods provided allow aspects taken account utilise Random Forest imputation using missForest package. shows Linear Discriminant Analysis (LDA) plot example data. eigenvalue (Tw) gives comparable indication separation sample classes.  following shows , except application imputation prior LDA. imputed data based data samples present data set. shows slight drop eigenvalue therefore reduced separation sample classes.  Imputation accuracy likely reduced data sparse underlying class structure significant discrimination. shows application imputation prior LDA, except time imputation class-wise. imputed data based values samples within class.  shows slight increase eigenvalue classes showing greater separation. likely due increased accuracy imputed data relative class structure.","code":"d %>%   keepClasses(cls = 'day',classes = c('H','5')) %>%   occupancyMaximum(cls = 'day',occupancy = 2/3) %>%   plotLDA(cls = 'day') d %>%   keepClasses(cls = 'day',classes = c('H','5')) %>%   occupancyMaximum(cls = 'day',occupancy = 2/3) %>%   imputeAll(parallel = 'variables') %>%   plotLDA(cls = 'day') d %>%   keepClasses(cls = 'day',classes = c('H','5')) %>%   occupancyMaximum(cls = 'day',occupancy = 2/3) %>%   imputeClass(cls = 'day') %>%   plotLDA(cls = 'day')"},{"path":"https://jasenfinch.github.io/metabolyseR/articles/pre_treatment.html","id":"feature-filtering-based-on-quality-control-qc-samples","dir":"Articles","previous_headings":"Pre-treatment elements","what":"Feature filtering based on quality control (QC) samples","title":"Metabolomics data pre-treatment","text":"QC sample average pooled sample, equally representative composition samples present within experimental set. Within analytical run, QC sample analysed equal intervals throughout run. class structure within run, randomised within block fashion classes equally represented block throughout run. QC sample can injected analysed randomised blocks. provides set technical injections allows variability instrument performance run accounted robustness acquired variables assessed. technical reproducibility acquired variable can assessed using ’s relative standard deviation (RSD) within QC samples. variable RSDs can filtered threshold value remove metabolome features poorly reproducible across analytical runs. variable filtering strategy advantage occupancy alone dependent underlying class structure. Therefore, variables variable numbers alter new class structure imposed upon data. example data set include QC samples. example, H class used. Firstly, RSD distribution assessed H class. following retains H class samples aid visualisation. table RSD values features can computed . distributions feature RSD values can plotted H class.  shows number features high RSD values therefore poor analytical robustness. Many likely result poor occupancy zero values. Applying occupancy filter prior plotting indeed show reduction upper range RSD values retained.  metabolyseR contains number methods applying pre-treatment routines specifically QC samples prefixed QC. include methods feature filtering data set based occupancy QC class, imputation QC class , feature filtering based RSD values QC class removal QC class. shows example applying QC methods. first filter features data set based occupancy QC class. features filtered based RSD values QC class using RSD threshold 50%. class index QC samples specified using QCidx argument. removes total 637 features.","code":"QC <- d %>%   keepClasses(cls = 'day',classes = 'H') QC %>%   rsd(cls = 'day') #> # A tibble: 2,000 × 5 #>    day   Feature  Mean    SD   RSD #>    <fct> <chr>   <dbl> <dbl> <dbl> #>  1 H     N1        0     0   NaN   #>  2 H     N10       0     0   NaN   #>  3 H     N100      0     0   NaN   #>  4 H     N1000   114.   19.4  17.0 #>  5 H     N1001    99.2  21.6  21.7 #>  6 H     N1002    86.7  23.9  27.6 #>  7 H     N1003    82.3  18.0  21.9 #>  8 H     N1004    91.6  18.8  20.5 #>  9 H     N1005    78.2  14.0  17.9 #> 10 H     N1006    78.6  21.3  27.1 #> # ℹ 1,990 more rows QC %>%   plotRSD(cls = 'day') #> Warning: Removed 123 rows containing non-finite values #> (`stat_density()`). #> Warning: Removed 1 row containing missing values (`geom_line()`). QC %>%   occupancyMaximum(cls = 'day',occupancy = 2/3) %>%   plotRSD(cls = 'day') QC_filtered <- d %>%   QCoccupancy(cls = 'day',QCidx = 'H',occupancy = 2/3) %>%   QCrsdFilter(cls = 'day',QCidx = 'H',RSDthresh = 50) print(QC_filtered) #>  #> AnalysisData object containing: #>  #> Samples: 120  #> Features: 1363  #> Info: 9"},{"path":"https://jasenfinch.github.io/metabolyseR/articles/pre_treatment.html","id":"routine-analyses","dir":"Articles","previous_headings":"","what":"Routine analyses","title":"Metabolomics data pre-treatment","text":"routine analyses, available pre-treatment elements can retreived using: available methods specified pre-treatment element can viewed using: default pre-treatment parameters can first assigned variable p. preTreatmentParameters() function allows parameters particular pre-treatment elements specified. following specifies pre-treatment elements used data set. include keeping certain sample classes, filtering features based class occupancy application TIC normalisation. assigned p variable using parameters() method. Printing p shows pre-treatment steps. Next, day sample information column can specified, along classes kept H, 1 2 classes. Printing p shows final pre-treatment parameters used analysis. pre-treatment routine can executed. Printing analysis object shows resulting data pre-treatment routine. pre-treated data can extracted Analysis object using several methods. Firstly analysisResults() method. secondly preTreated() method. supervised random forest analysis can used visualise structure resulting pre-treated data.","code":"preTreatmentElements() #> [1] \"aggregate\"       \"correction\"      \"impute\"          \"keep\"            #> [5] \"occupancyFilter\" \"QC\"              \"remove\"          \"transform\" preTreatmentMethods('remove') #> [1] \"classes\"  \"features\" \"samples\" p <- analysisParameters('pre-treatment') parameters(p,'pre-treatment') <- preTreatmentParameters(   list(     keep = 'classes',     occupancyFilter = 'maximum',     transform = 'TICnorm'    ) ) print(p) #> Parameters: #> pre-treatment #>  keep #>      classes #>          cls = class #>          classes = c() #>  occupancyFilter #>      maximum #>          cls = class #>          occupancy = 2/3 #>  transform #>      TICnorm changeParameter(p,'cls') <- 'day' changeParameter(p,'classes') <- c('H','1','2') print(p) #> Parameters: #> pre-treatment #>  keep #>      classes #>          cls = day #>          classes = c(\"H\", \"1\", \"2\") #>  occupancyFilter #>      maximum #>          cls = day #>          occupancy = 2/3 #>  transform #>      TICnorm analysis <- metabolyse(abr1$neg,abr1$fact,p) #>  [34m #> metabolyseR  [39m  [31mv0.15.1 [39m Tue May 30 14:38:28 2023 #> ________________________________________________________________________________ #>  [33m [33mParameters: [33m [39m #> pre-treatment #>  keep #>      classes #>          cls = day #>          classes = c(\"H\", \"1\", \"2\") #>  occupancyFilter #>      maximum #>          cls = day #>          occupancy = 2/3 #>  transform #>      TICnorm #> ________________________________________________________________________________ #>  [34mPre-treatment  [39m…   [34mPre-treatment  [39m     [32m✔ [39m [7S] #> ________________________________________________________________________________ #>  #>  [32mComplete!  [39m[7S] print(analysis) #>  #> metabolyseR v0.15.1 #> Analysis: #>     Tue May 30 14:38:28 2023 #>  #>  Raw Data: #>      No. samples = 120 #>      No. features = 2000 #>  #>  Pre-treated Data: #>      Tue May 30 14:38:35 2023 #>      No. samples = 60 #>      No. features = 1723 analysisResults(analysis,'pre-treatment') #>  #> AnalysisData object containing: #>  #> Samples: 60  #> Features: 1723  #> Info: 9 preTreated(analysis) #>  #> AnalysisData object containing: #>  #> Samples: 60  #> Features: 1723  #> Info: 9 analysis %>%   plotSupervisedRF(cls = 'day',type = 'pre-treated')"},{"path":"https://jasenfinch.github.io/metabolyseR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jasen Finch. Author, maintainer.","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Finch J (2023). metabolyseR: Methods Pre-Treatment, Data Mining Correlation Analyses Metabolomics Data. R package version 0.15.1, https://jasenfinch.github.io/metabolyseR/.","code":"@Manual{,   title = {metabolyseR: Methods for Pre-Treatment, Data Mining and Correlation Analyses of Metabolomics Data},   author = {Jasen Finch},   year = {2023},   note = {R package version 0.15.1},   url = {https://jasenfinch.github.io/metabolyseR/}, }"},{"path":"https://jasenfinch.github.io/metabolyseR/index.html","id":"metabolyser","dir":"","previous_headings":"","what":"Methods for Pre-Treatment, Data Mining and Correlation Analyses of Metabolomics Data","title":"Methods for Pre-Treatment, Data Mining and Correlation Analyses of Metabolomics Data","text":"tool kit pre-treatment, modelling, feature selection correlation analyses metabolomics data.","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Methods for Pre-Treatment, Data Mining and Correlation Analyses of Metabolomics Data","text":"package provides tool kit methods metabolomics analyses includes: data pre-treatment multivariate univariate modelling/data mining techniques correlation analysis","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Methods for Pre-Treatment, Data Mining and Correlation Analyses of Metabolomics Data","text":"metabolyseR package can installed GitHub using following: package documentation can browsed online https://jasenfinch.github.io/metabolyseR/; however, users want compile vignettes locally, following can used.","code":"remotes::install_github('jasenfinch/metabolyseR') remotes::install_github('jasenfinch/metabolyseR',build_vignettes = TRUE,dependencies = TRUE)"},{"path":"https://jasenfinch.github.io/metabolyseR/index.html","id":"learn-more","dir":"","previous_headings":"","what":"Learn more","title":"Methods for Pre-Treatment, Data Mining and Correlation Analyses of Metabolomics Data","text":"package documentation can browsed online https://jasenfinch.github.io/metabolyseR/. first time using metabolyseR see Introduction vignette quick start analysis information get started. believe ’ve found bug metabolyseR, please file bug (, possible, reproducible example) https://github.com/jasenfinch/metabolyseR/issues.","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/index.html","id":"quick-start-example-analysis","dir":"","previous_headings":"","what":"Quick start example analysis","title":"Methods for Pre-Treatment, Data Mining and Correlation Analyses of Metabolomics Data","text":"example analysis use abr1 data set metaboData package. nominal mass flow-injection mass spectrometry (FI-MS) fingerprinting data plant-pathogen infection time course experiment. analysis also include use pipe %>% magrittr package. First load necessary packages. example use negative acquisition mode data (abr1$neg) sample meta-information (abr1$fact). Create AnalysisData class object using following: data includes 120 samples 2000 mass spectral features shown . clsAvailable() function can used identify columns available meta-information table. analysis, using infection time course class information contained day column. can extracted class frequencies tabulated using following: can seen , experiment made six infection time point classes includes healthy control class (H) five day infection time points (1-5), 20 replicates. data pre-treatment prior statistical analysis, two-thirds maximum class occupancy filter can applied. Features maximum proportion non-missing data per class two-thirds retained. total ion count normalisation also applied. reduced data set 1760 relevant features. structure data can visualised using unsupervised supervised methods. instance, first two principle components principle component analysis (PCA) data sample points coloured infection class can plotted using:  similarly, multidimensional scaling (MDS) sample proximity values supervised random forest classification model along receiver operator characteristic (ROC) curves.  progression can clearly seen earliest latest infected time points. feature selection, one-way analysis variance (ANOVA) can performed feature identify features significantly explanatory infection time point. table significantly explanatory features can extracted bonferroni correction adjusted p value < 0.05 using: ANOVA identified 379 features significantly explanatory infection time course. heat map mean relative intensity class explanatory features can plotted visualise trends infection time point classes.  Many explanatory features can seen highly abundant final infection time point 5. Finally, box plots trends individual features can plotted, N341 feature .","code":"library(metabolyseR) library(metaboData) d <- analysisData(abr1$neg,abr1$fact) d #>  #> AnalysisData object containing: #>  #> Samples: 120  #> Features: 2000  #> Info: 9 clsAvailable(d) #> [1] \"injorder\" \"pathcdf\"  \"filecdf\"  \"name.org\" \"remark\"   \"name\"     \"rep\"      #> [8] \"day\"      \"class\" d %>%   clsExtract(cls = 'day') %>%   table() #> . #>  1  2  3  4  5  H  #> 20 20 20 20 20 20 d <- d %>%   occupancyMaximum(cls = 'day', occupancy = 2/3) %>%   transformTICnorm() d #>  #> AnalysisData object containing: #>  #> Samples: 120  #> Features: 1760  #> Info: 9 plotPCA(d,cls = 'day',xAxis = 'PC1',yAxis = 'PC2') plotSupervisedRF(d,cls = 'day') anova_results <- d %>%   anova(cls = 'day') explan_feat <- explanatoryFeatures(anova_results,threshold = 0.05) explan_feat #> # A tibble: 379 × 10 #>    respo…¹ compa…² feature term     df   sumsq  meansq stati…³  p.value adjust…⁴ #>    <chr>   <chr>   <chr>   <chr> <dbl>   <dbl>   <dbl>   <dbl>    <dbl>    <dbl> #>  1 day     1~2~3~… N341    resp…     5 3.88e-4 7.76e-5   137.  1.55e-46 2.73e-43 #>  2 day     1~2~3~… N133    resp…     5 7.00e-5 1.40e-5   126.  8.63e-45 1.52e-41 #>  3 day     1~2~3~… N163    resp…     5 6.01e-5 1.20e-5   117.  2.95e-43 5.19e-40 #>  4 day     1~2~3~… N1087   resp…     5 2.42e-6 4.84e-7    99.8 5.61e-40 9.88e-37 #>  5 day     1~2~3~… N171    resp…     5 2.25e-7 4.50e-8    95.7 3.84e-39 6.75e-36 #>  6 day     1~2~3~… N513    resp…     5 3.38e-6 6.76e-7    95.3 4.78e-39 8.41e-36 #>  7 day     1~2~3~… N1025   resp…     5 2.78e-6 5.56e-7    91.0 3.91e-38 6.87e-35 #>  8 day     1~2~3~… N342    resp…     5 3.71e-6 7.41e-7    90.3 5.32e-38 9.36e-35 #>  9 day     1~2~3~… N1083   resp…     5 5.11e-5 1.02e-5    89.0 1.06e-37 1.87e-34 #> 10 day     1~2~3~… N1085   resp…     5 1.10e-5 2.19e-6    83.4 1.92e-36 3.37e-33 #> # … with 369 more rows, and abbreviated variable names ¹​response, ²​comparison, #> #   ³​statistic, ⁴​adjusted.p.value plotExplanatoryHeatmap(anova_results,                        threshold = 0.05,                        featureNames = FALSE) plotFeature(anova_results,feature = 'N341',cls = 'day')"},{"path":"https://jasenfinch.github.io/metabolyseR/reference/Analysis-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Analysis S4 class — Analysis-class","title":"Analysis S4 class — Analysis-class","text":"S4 class store analysis results.","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/Analysis-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Analysis S4 class — Analysis-class","text":"log list containing analysis dates time parameters class AnalysisParameters containing analysis parameters raw list containing info raw data pre-treated list containing preTreated info raw data modelling list containing modelling results correlations tibble containing weighted edgelist correlations","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/AnalysisData-class.html","id":null,"dir":"Reference","previous_headings":"","what":"AnalysisData S4 class — AnalysisData-class","title":"AnalysisData S4 class — AnalysisData-class","text":"S4 class metabolomic data sample meta information.","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/AnalysisData-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"AnalysisData S4 class — AnalysisData-class","text":"data sample metabolomic data info sample meta information","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/AnalysisParameters-class.html","id":null,"dir":"Reference","previous_headings":"","what":"AnalysisParameters S4 class — AnalysisParameters-class","title":"AnalysisParameters S4 class — AnalysisParameters-class","text":"S4 class store analysis parameters.","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/AnalysisParameters-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"AnalysisParameters S4 class — AnalysisParameters-class","text":"pre-treatment list containing parameters data pre-treatment modelling list containing parameters modelling correlations list containing parameters correlations","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/QC.html","id":null,"dir":"Reference","previous_headings":"","what":"Quality control (QC) sample treatments — QCimpute","title":"Quality control (QC) sample treatments — QCimpute","text":"Quality control (QC) sample pre-treatment methods.","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/QC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quality control (QC) sample treatments — QCimpute","text":"","code":"QCimpute(   d,   cls = \"class\",   QCidx = \"QC\",   occupancy = 2/3,   parallel = \"variables\",   seed = 1234 )  # S4 method for AnalysisData QCimpute(   d,   cls = \"class\",   QCidx = \"QC\",   occupancy = 2/3,   parallel = \"variables\",   seed = 1234 )  QCoccupancy(d, cls = \"class\", QCidx = \"QC\", occupancy = 2/3)  # S4 method for AnalysisData QCoccupancy(d, cls = \"class\", QCidx = \"QC\", occupancy = 2/3)  QCremove(d, cls = \"class\", QCidx = \"QC\")  # S4 method for AnalysisData QCremove(d, cls = \"class\", QCidx = \"QC\")  QCrsdFilter(d, cls = \"class\", QCidx = \"QC\", RSDthresh = 50)  # S4 method for AnalysisData QCrsdFilter(d, cls = \"class\", QCidx = \"QC\", RSDthresh = 50)"},{"path":"https://jasenfinch.github.io/metabolyseR/reference/QC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quality control (QC) sample treatments — QCimpute","text":"d S4 object class AnalysisData cls info column use class labels QCidx QC sample label occupancy occupancy threshold filtering parallel parallel type use. See ?missForest details seed random number seed RSDthresh RSD (%) threshold filtering","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/QC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quality control (QC) sample treatments — QCimpute","text":"S4 object class AnalysisData containing QC treated data.","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/QC.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Quality control (QC) sample treatments — QCimpute","text":"QC sample average pooled sample, equally representative composition samples present within experimental set. Within analytical run, QC sample analysed equal intervals throughout run. class structure within run, randomised within block fashion classes equally represented block throughout run. QC sample can injected analysed randomised blocks. provides set technical injections allows variability instrument performance run accounted robustness acquired variables assessed. technical reproducibility acquired variable can assessed using relative standard deviation (RSD) within QC samples. variable RSDs can filtered threshold value remove metabolome features poorly reproducible across analytical runs. variable filtering strategy advantage occupancy alone dependent underlying class structure. Therefore, variables variable numbers alter new class structure imposed upon data.","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/QC.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Quality control (QC) sample treatments — QCimpute","text":"QCimpute: Missing value imputation QC samples. QCoccupancy: Feature maximum occupancy filtering based QC samples. QCremove: Remove QC samples. QCrsdFilter: Feature filtering based RSD QC sample features.","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/QC.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Quality control (QC) sample treatments — QCimpute","text":"","code":"## Initial example data preparation library(metaboData) d <- analysisData(abr1$neg[,1:1000],abr1$fact)  ## Plot the feature RSD distributions of the H class only d %>%   keepClasses(cls = 'day',classes = 'H') %>%   plotRSD(cls = 'day') #> Warning: Removed 119 rows containing non-finite values (`stat_density()`). #> Warning: Removed 1 row containing missing values (`geom_line()`).   ## Apply QC feature occupancy filtering and QC feature RSD filtering QC_treated <- d %>%   QCoccupancy(cls = 'day',QCidx = 'H',occupancy = 2/3) %>%  QCrsdFilter(cls = 'day',QCidx = 'H',RSDthresh = 50)  print(QC_treated) #>  #> AnalysisData object containing: #>  #> Samples: 120  #> Features: 404  #> Info: 9  #>   ## Plot the feature RSD distributions of the H class after QC treatments QC_treated %>%   keepClasses(cls = 'day',classes = 'H') %>%   plotRSD(cls = 'day')"},{"path":"https://jasenfinch.github.io/metabolyseR/reference/RandomForest-class.html","id":null,"dir":"Reference","previous_headings":"","what":"RandomForest S4 class — RandomForest-class","title":"RandomForest S4 class — RandomForest-class","text":"S4 class random forest results models.","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/RandomForest-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"RandomForest S4 class — RandomForest-class","text":"type random forest type response response variable name metrics tibble model performance metrics predictions tibble model observation predictions permutations list permutations measure importance results tables importances tibble model feature importances proximities tibble model observation proximities models list random forest models","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/Univariate-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Univariate S4 class — Univariate-class","title":"Univariate S4 class — Univariate-class","text":"S4 class univariate test models results.","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/Univariate-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Univariate S4 class — Univariate-class","text":"type univariate test type models list model objects results tibble containing test results","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/aggregate.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample aggregation — aggregateMean","title":"Sample aggregation — aggregateMean","text":"Aggregation sample features based grouping variable.","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/aggregate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample aggregation — aggregateMean","text":"","code":"aggregateMean(d, cls = \"class\")  # S4 method for AnalysisData aggregateMean(d, cls = \"class\")  aggregateMedian(d, cls = \"class\")  # S4 method for AnalysisData aggregateMedian(d, cls = \"class\")  aggregateSum(d, cls = \"class\")  # S4 method for AnalysisData aggregateSum(d, cls = \"class\")"},{"path":"https://jasenfinch.github.io/metabolyseR/reference/aggregate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample aggregation — aggregateMean","text":"d S4 object class AnalysisData cls info columns across aggregate data","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/aggregate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample aggregation — aggregateMean","text":"S4 object class AnalysisData containing aggregated data.","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/aggregate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sample aggregation — aggregateMean","text":"Sample aggregation allows electronic pooling sample features based grouping variable. useful situations presence technical replicates can aggregated reduce effects pseudo replication.","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/aggregate.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Sample aggregation — aggregateMean","text":"aggregateMean: Aggregate sample features group mean. aggregateMedian: Aggregate sample features group median. aggregateSum: Aggregate sample features group total.","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/aggregate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample aggregation — aggregateMean","text":"","code":"## Each of the following examples shows the application of the aggregation method and then  ## a Principle Component Analysis is plotted to show it's effect on the data structure.  ## Initial example data preparation library(metaboData)  d <- analysisData(abr1$neg[,200:300],abr1$fact) %>%   occupancyMaximum(occupancy = 2/3)  d %>%   plotPCA(cls = 'day')    ## Mean aggregation d %>%   aggregateMean(cls = c('day','class')) %>%   plotPCA(cls = 'day',ellipses = FALSE)    ## Median aggregation d %>%   aggregateMedian(cls = c('day','class')) %>%   plotPCA(cls = 'day',ellipses = FALSE)    ## Sum aggregation d %>%   aggregateSum(cls = c('day','class')) %>%   plotPCA(cls = 'day',ellipses = FALSE)"},{"path":"https://jasenfinch.github.io/metabolyseR/reference/analysis-accessors.html","id":null,"dir":"Reference","previous_headings":"","what":"AnalysisData and Analysis class accessors — dat","title":"AnalysisData and Analysis class accessors — dat","text":"Accessor methods AnalysisData Analysis S4 classes.","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/analysis-accessors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"AnalysisData and Analysis class accessors — dat","text":"","code":"dat(x, ...)  # S4 method for AnalysisData dat(x)  # S4 method for Analysis dat(x, type = c(\"pre-treated\", \"raw\"))  dat(x, ...) <- value  # S4 method for AnalysisData dat(x) <- value  # S4 method for Analysis dat(x, type = c(\"pre-treated\", \"raw\")) <- value  sinfo(x, ...)  # S4 method for AnalysisData sinfo(x)  # S4 method for Analysis sinfo(x, type = c(\"pre-treated\", \"raw\"), value)  sinfo(x, ...) <- value  # S4 method for AnalysisData sinfo(x) <- value  # S4 method for Analysis sinfo(x, type = c(\"pre-treated\", \"raw\")) <- value  raw(x)  # S4 method for Analysis raw(x)  raw(x) <- value  # S4 method for Analysis raw(x) <- value  preTreated(x)  # S4 method for Analysis preTreated(x)  preTreated(x) <- value  # S4 method for Analysis preTreated(x) <- value  features(x, ...)  # S4 method for AnalysisData features(x)  # S4 method for Analysis features(x, type = c(\"pre-treated\", \"raw\"))  nSamples(x, ...)  # S4 method for AnalysisData nSamples(x)  # S4 method for Analysis nSamples(x, type = c(\"pre-treated\", \"raw\"))  nFeatures(x, ...)  # S4 method for AnalysisData nFeatures(x)  # S4 method for Analysis nFeatures(x, type = c(\"pre-treated\", \"raw\"))  analysisResults(x, element)  # S4 method for Analysis analysisResults(x, element)"},{"path":"https://jasenfinch.github.io/metabolyseR/reference/analysis-accessors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"AnalysisData and Analysis class accessors — dat","text":"x S4 object class AnalysisData Analysis ... arguments pass appropriate method type get set raw pre-treated data value value set element analysis element results return","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/analysis-accessors.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"AnalysisData and Analysis class accessors — dat","text":"dat: Return metabolomic data table. dat<-: Set metabolomic data table. sinfo: Return sample information data table. sinfo<-: Set sample information data table. raw: Return AnalysisData object containing unprocessed metabolomic data Analysis object. raw<-: Set AnalysisData object raw slot Analysis class object. preTreated: Return AnalysisData object containing pre-treated metabolomic data Analysis object. preTreated<-: Set AnalysisData object pre-treated slot Analysis class object. features: Return features names. nSamples: Return number samples. nFeatures: Return number features. analysisResults: Return results Analysis object analysis element.","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/analysis-accessors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"AnalysisData and Analysis class accessors — dat","text":"","code":"library(metaboData)  d <- analysisData(abr1$neg[,200:300],abr1$fact)  ## Return the metabolomic data dat(d) #> # A tibble: 120 × 101 #>     N200  N201  N202  N203  N204  N205   N206  N207  N208  N209  N210   N211 #>    <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>  <dbl> <dbl> <dbl> <dbl> <dbl>  <dbl> #>  1     0  0    0     2.98  0     0     0      0.468 0     1.43  0     0.170  #>  2     0  0    0     1.30  0     1.15  0      0     0     0.492 0     0      #>  3     0  0    0     6.08  0.214 2.53  0      1.85  0     1.06  0.184 0.0827 #>  4     0  4.24 0     1.48  0     0     0.147  0     0     0.929 0     0.286  #>  5     0  0    0     0.530 0     0.233 0.376  1.41  0     0.274 0     0.139  #>  6     0  0    0     0     0     0.438 0      0     0.219 0.325 0     0      #>  7     0  0    0     0.547 0     0     0      0     0     0     0     0      #>  8     0  0    0.195 1.37  0.594 1.11  0.0902 0     0     0     0.162 0      #>  9     0  0    0     1.24  0     0.196 0.675  0.528 0.128 2.61  0.294 2.66   #> 10     0  0    0     0.113 0     1.06  0      0     0     1.76  2.96  0      #> # ℹ 110 more rows #> # ℹ 89 more variables: N212 <dbl>, N213 <dbl>, N214 <dbl>, N215 <dbl>, #> #   N216 <dbl>, N217 <dbl>, N218 <dbl>, N219 <dbl>, N220 <dbl>, N221 <dbl>, #> #   N222 <dbl>, N223 <dbl>, N224 <dbl>, N225 <dbl>, N226 <dbl>, N227 <dbl>, #> #   N228 <dbl>, N229 <dbl>, N230 <dbl>, N231 <dbl>, N232 <dbl>, N233 <dbl>, #> #   N234 <dbl>, N235 <dbl>, N236 <dbl>, N237 <dbl>, N238 <dbl>, N239 <dbl>, #> #   N240 <dbl>, N241 <dbl>, N242 <dbl>, N243 <dbl>, N244 <dbl>, N245 <dbl>, …  ## Set the metabolomic data dat(d) <- abr1$neg[,300:400]  ## Return the sample information sinfo(d) #> # A tibble: 120 × 9 #>    injorder pathcdf              filecdf name.org remark name    rep day   class #>       <int> <fct>                <fct>   <fct>    <fct>  <fct> <int> <fct> <int> #>  1        1 C:/Xcalibur/ANDI-LT… 01.cdf  12_2     ok     12_2      2 2         2 #>  2        2 C:/Xcalibur/ANDI-LT… 02.cdf  13_3     ok     13_4      3 3         3 #>  3        3 C:/Xcalibur/ANDI-LT… 03.cdf  15_4     ok     15_5      5 4         4 #>  4        4 C:/Xcalibur/ANDI-LT… 04.cdf  12_1     ok     12_2      2 1         1 #>  5        5 C:/Xcalibur/ANDI-LT… 05.cdf  12_2     ok     12_2      2 2         2 #>  6        6 C:/Xcalibur/ANDI-LT… 06.cdf  11_1     ok     11_2      1 1         1 #>  7        7 C:/Xcalibur/ANDI-LT… 07.cdf  14_2     ok     14_3      4 2         2 #>  8        8 C:/Xcalibur/ANDI-LT… 08.cdf  11_4     ok     11_5      1 4         4 #>  9        9 C:/Xcalibur/ANDI-LT… 09.cdf  13_H     ok     13_H      3 H         6 #> 10       10 C:/Xcalibur/ANDI-LT… 10.cdf  15_H     ok     15_H      5 H         6 #> # ℹ 110 more rows  ## Set the sample information sinfo(d) <- abr1$fact  ## Return the feature names features(d) #>   [1] \"N300\" \"N301\" \"N302\" \"N303\" \"N304\" \"N305\" \"N306\" \"N307\" \"N308\" \"N309\" #>  [11] \"N310\" \"N311\" \"N312\" \"N313\" \"N314\" \"N315\" \"N316\" \"N317\" \"N318\" \"N319\" #>  [21] \"N320\" \"N321\" \"N322\" \"N323\" \"N324\" \"N325\" \"N326\" \"N327\" \"N328\" \"N329\" #>  [31] \"N330\" \"N331\" \"N332\" \"N333\" \"N334\" \"N335\" \"N336\" \"N337\" \"N338\" \"N339\" #>  [41] \"N340\" \"N341\" \"N342\" \"N343\" \"N344\" \"N345\" \"N346\" \"N347\" \"N348\" \"N349\" #>  [51] \"N350\" \"N351\" \"N352\" \"N353\" \"N354\" \"N355\" \"N356\" \"N357\" \"N358\" \"N359\" #>  [61] \"N360\" \"N361\" \"N362\" \"N363\" \"N364\" \"N365\" \"N366\" \"N367\" \"N368\" \"N369\" #>  [71] \"N370\" \"N371\" \"N372\" \"N373\" \"N374\" \"N375\" \"N376\" \"N377\" \"N378\" \"N379\" #>  [81] \"N380\" \"N381\" \"N382\" \"N383\" \"N384\" \"N385\" \"N386\" \"N387\" \"N388\" \"N389\" #>  [91] \"N390\" \"N391\" \"N392\" \"N393\" \"N394\" \"N395\" \"N396\" \"N397\" \"N398\" \"N399\" #> [101] \"N400\"  ## Return the number of samples nSamples(d) #> [1] 120  ## Return the number of features nFeatures(d) #> [1] 101"},{"path":"https://jasenfinch.github.io/metabolyseR/reference/analysisData.html","id":null,"dir":"Reference","previous_headings":"","what":"AnalysisData class constructor — analysisData","title":"AnalysisData class constructor — analysisData","text":"Create AnalysisData S4 object.","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/analysisData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"AnalysisData class constructor — analysisData","text":"","code":"analysisData(data, info)"},{"path":"https://jasenfinch.github.io/metabolyseR/reference/analysisData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"AnalysisData class constructor — analysisData","text":"data table containing sample metabolomic data info table containing sample meta information","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/analysisData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"AnalysisData class constructor — analysisData","text":"S4 object class Analysis.","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/analysisData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"AnalysisData class constructor — analysisData","text":"","code":"library(metaboData) d <- analysisData(data = abr1$neg,info = abr1$fact)  print(d) #>  #> AnalysisData object containing: #>  #> Samples: 120  #> Features: 2000  #> Info: 9  #>"},{"path":"https://jasenfinch.github.io/metabolyseR/reference/analysisElements.html","id":null,"dir":"Reference","previous_headings":"","what":"Analysis elements — analysisElements","title":"Analysis elements — analysisElements","text":"Return analysis elements available metabolyseR.","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/analysisElements.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Analysis elements — analysisElements","text":"","code":"analysisElements()"},{"path":"https://jasenfinch.github.io/metabolyseR/reference/analysisElements.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Analysis elements — analysisElements","text":"character vector analysis elements.","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/analysisElements.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Analysis elements — analysisElements","text":"","code":"analysisElements() #> [1] \"pre-treatment\" \"modelling\"     \"correlations\""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/analysisParameters.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an AnalysisParameters S4 class object — analysisParameters","title":"Create an AnalysisParameters S4 class object — analysisParameters","text":"Initiate AnalysisParameters object default analysis parameters analysis elements.","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/analysisParameters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an AnalysisParameters S4 class object — analysisParameters","text":"","code":"analysisParameters(elements = analysisElements())"},{"path":"https://jasenfinch.github.io/metabolyseR/reference/analysisParameters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an AnalysisParameters S4 class object — analysisParameters","text":"elements character vector containing elements analysis.","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/analysisParameters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an AnalysisParameters S4 class object — analysisParameters","text":"S4 object class AnalysisParameters containing default analysis parameters.","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/analysisParameters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an AnalysisParameters S4 class object — analysisParameters","text":"","code":"p <- analysisParameters()  print(p) #> Parameters: #> pre-treatment #> \tQC #> \t\toccupancyFilter #> \t\t\tcls = class #> \t\t\tQCidx = QC #> \t\t\toccupancy = 2/3 #> \t\timpute #> \t\t\tcls = class #> \t\t\tQCidx = QC #> \t\t\toccupancy = 2/3 #> \t\t\tparallel = variables #> \t\t\tseed = 1234 #> \t\tRSDfilter #> \t\t\tcls = class #> \t\t\tQCidx = QC #> \t\t\tRSDthresh = 50 #> \t\tremoveQC #> \t\t\tcls = class #> \t\t\tQCidx = QC #> \toccupancyFilter #> \t\tmaximum #> \t\t\tcls = class #> \t\t\toccupancy = 2/3 #> \timpute #> \t\tclass #> \t\t\tcls = class #> \t\t\toccupancy = 2/3 #> \t\t\tseed = 1234 #> \ttransform #> \t\tTICnorm #>  #> modelling #> \trandomForest #> \t\tcls = class #> \t\trf = list() #> \t\treps = 1 #> \t\tbinary = FALSE #> \t\tcomparisons = list() #> \t\tperm = 0 #> \t\treturnModels = FALSE #> \t\tseed = 1234 #>  #> correlations #> \tmethod = pearson #> \tpAdjustMethod = bonferroni #> \tcorPvalue = 0.05 #> \tminCoef = 0 #> \tmaxCor = Inf"},{"path":"https://jasenfinch.github.io/metabolyseR/reference/anova.html","id":null,"dir":"Reference","previous_headings":"","what":"ANOVA — anova","title":"ANOVA — anova","text":"One-way analysis variance (ANOVA).","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/anova.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ANOVA — anova","text":"","code":"anova(   x,   cls = \"class\",   pAdjust = \"bonferroni\",   comparisons = list(),   returnModels = FALSE )  # S4 method for AnalysisData anova(   x,   cls = \"class\",   pAdjust = \"bonferroni\",   comparisons = list(),   returnModels = FALSE )"},{"path":"https://jasenfinch.github.io/metabolyseR/reference/anova.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ANOVA — anova","text":"x S4 object class AnalysisData cls vector sample info column names analyse pAdjust p value adjustment method comparisons list comparisons perform returnModels models returned","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/anova.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ANOVA — anova","text":"","code":"library(metaboData)  d <- analysisData(abr1$neg[,200:300],abr1$fact)  ## Perform ANOVA anova_analysis <- anova(d,cls = 'day')  ## Extract significant features explanatoryFeatures(anova_analysis) #> # A tibble: 21 × 10 #>    response comparison  feature term        df  sumsq  meansq statistic  p.value #>    <chr>    <chr>       <chr>   <chr>    <dbl>  <dbl>   <dbl>     <dbl>    <dbl> #>  1 day      1~2~3~4~5~H N277    response     5 63072. 12614.       39.1 3.14e-23 #>  2 day      1~2~3~4~5~H N229    response     5 43549.  8710.       18.1 3.54e-13 #>  3 day      1~2~3~4~5~H N299    response     5  1211.   242.       16.4 3.87e-12 #>  4 day      1~2~3~4~5~H N295    response     5   271.    54.2      13.6 2.02e-10 #>  5 day      1~2~3~4~5~H N281    response     5   192.    38.5      12.5 1.16e- 9 #>  6 day      1~2~3~4~5~H N245    response     5  6268.  1254.       11.6 4.38e- 9 #>  7 day      1~2~3~4~5~H N255    response     5  5363.  1073.       11.0 1.14e- 8 #>  8 day      1~2~3~4~5~H N278    response     5   277.    55.4      10.9 1.48e- 8 #>  9 day      1~2~3~4~5~H N259    response     5  1236.   247.       10.8 1.72e- 8 #> 10 day      1~2~3~4~5~H N279    response     5   810.   162.       10.5 2.77e- 8 #> # ℹ 11 more rows #> # ℹ 1 more variable: adjusted.p.value <dbl>"},{"path":"https://jasenfinch.github.io/metabolyseR/reference/bind.html","id":null,"dir":"Reference","previous_headings":"","what":"Bind AnalysisData objects by row — bindRows","title":"Bind AnalysisData objects by row — bindRows","text":"Bind rows AnalysisData objects contained within list.","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/bind.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bind AnalysisData objects by row — bindRows","text":"","code":"bindRows(d)  # S4 method for list bindRows(d)"},{"path":"https://jasenfinch.github.io/metabolyseR/reference/bind.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bind AnalysisData objects by row — bindRows","text":"d list object containing S4 objects class AnalysisData bound","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/bind.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bind AnalysisData objects by row — bindRows","text":"S4 object class AnalysisData containg bound data sets.","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/bind.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bind AnalysisData objects by row — bindRows","text":"","code":"library(metaboData) d <- list(  negative = analysisData(abr1$neg,abr1$fact),  positive = analysisData(abr1$pos,abr1$fact)  )  bindRows(d) #>  #> AnalysisData object containing: #>  #> Samples: 240  #> Features: 4000  #> Info: 9  #>"},{"path":"https://jasenfinch.github.io/metabolyseR/reference/changeParameter.html","id":null,"dir":"Reference","previous_headings":"","what":"Change analysis parameters — changeParameter<-","title":"Change analysis parameters — changeParameter<-","text":"Change analysis parameters.","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/changeParameter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change analysis parameters — changeParameter<-","text":"","code":"changeParameter(x, parameterName, elements = analysisElements()) <- value  # S4 method for AnalysisParameters changeParameter(x, parameterName, elements = analysisElements()) <- value"},{"path":"https://jasenfinch.github.io/metabolyseR/reference/changeParameter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change analysis parameters — changeParameter<-","text":"x S4 object class AnalysisParameters parameterName name parameter change elements character vector analysis elements target parameter change. Can returned analysisElements(). value New value parameter","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/changeParameter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Change analysis parameters — changeParameter<-","text":"S4 object class AnalysisParameters.","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/changeParameter.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Change analysis parameters — changeParameter<-","text":"parameter name selected, parameters name altered.","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/changeParameter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Change analysis parameters — changeParameter<-","text":"","code":"p <- analysisParameters('pre-treatment')  changeParameter(p,'cls') <- 'day'  print(p) #> Parameters: #> pre-treatment #> \tQC #> \t\toccupancyFilter #> \t\t\tcls = day #> \t\t\tQCidx = QC #> \t\t\toccupancy = 2/3 #> \t\timpute #> \t\t\tcls = day #> \t\t\tQCidx = QC #> \t\t\toccupancy = 2/3 #> \t\t\tparallel = variables #> \t\t\tseed = 1234 #> \t\tRSDfilter #> \t\t\tcls = day #> \t\t\tQCidx = QC #> \t\t\tRSDthresh = 50 #> \t\tremoveQC #> \t\t\tcls = day #> \t\t\tQCidx = QC #> \toccupancyFilter #> \t\tmaximum #> \t\t\tcls = day #> \t\t\toccupancy = 2/3 #> \timpute #> \t\tclass #> \t\t\tcls = day #> \t\t\toccupancy = 2/3 #> \t\t\tseed = 1234 #> \ttransform #> \t\tTICnorm #>"},{"path":"https://jasenfinch.github.io/metabolyseR/reference/cls.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample meta information wrangling — clsAdd","title":"Sample meta information wrangling — clsAdd","text":"Query alter sample meta information AnalysisData Analysis class objects. Replace given sample info column Analysis AnalysisData object.","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/cls.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample meta information wrangling — clsAdd","text":"","code":"clsAdd(d, cls, value, ...)  # S4 method for AnalysisData clsAdd(d, cls, value)  # S4 method for Analysis clsAdd(d, cls, value, type = c(\"pre-treated\", \"raw\"))  clsArrange(d, cls = \"class\", descending = FALSE, ...)  # S4 method for AnalysisData clsArrange(d, cls = \"class\", descending = FALSE)  # S4 method for Analysis clsArrange(   d,   cls = \"class\",   descending = FALSE,   type = c(\"pre-treated\", \"raw\") )  clsAvailable(d, ...)  # S4 method for AnalysisData clsAvailable(d)  # S4 method for Analysis clsAvailable(d, type = c(\"pre-treated\", \"raw\"))  clsExtract(d, cls = \"class\", ...)  # S4 method for AnalysisData clsExtract(d, cls = \"class\")  # S4 method for Analysis clsExtract(d, cls = \"class\", type = c(\"pre-treated\", \"raw\"))  clsRemove(d, cls, ...)  # S4 method for AnalysisData clsRemove(d, cls)  # S4 method for Analysis clsRemove(d, cls, type = c(\"pre-treated\", \"raw\"))  clsRename(d, cls, newName, ...)  # S4 method for AnalysisData clsRename(d, cls, newName)  # S4 method for Analysis clsRename(d, cls, newName, type = c(\"pre-treated\", \"raw\"))  clsReplace(d, value, cls = \"class\", ...)  # S4 method for AnalysisData clsReplace(d, value, cls = \"class\")  # S4 method for Analysis clsReplace(d, value, cls = \"class\", type = c(\"pre-treated\", \"raw\"))"},{"path":"https://jasenfinch.github.io/metabolyseR/reference/cls.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample meta information wrangling — clsAdd","text":"d S4 object class Analysis AnalysisData cls sample info column extract value vactor new sample information replacement ... arguments pass specific method type raw pre-treated sample information descending TRUE/FALSE, arrange samples descending order newName new column name","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/cls.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Sample meta information wrangling — clsAdd","text":"clsAdd: Add sample information column. clsArrange: Arrange sample row order specified sample information column. clsAvailable: Retrieve names available sample information columns. clsExtract: Extract values specified sample information column. clsRemove: Remove sample information column. clsRename: Rename sample information column. clsReplace: Replace sample information column.","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/cls.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample meta information wrangling — clsAdd","text":"","code":"library(metaboData) d <- analysisData(abr1$neg,abr1$fact)  ## Add a sample information column named 'new' d <- clsAdd(d,'new',1:nSamples(d))  print(d) #>  #> AnalysisData object containing: #>  #> Samples: 120  #> Features: 2000  #> Info: 10  #>   ## Arrange the row orders by the 'day' column d <- clsArrange(d,'day')  clsExtract(d,'day') #>   [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 #>  [38] 2 2 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 #>  [75] 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 H H H H H H H H H H H #> [112] H H H H H H H H H #> Levels: 1 2 3 4 5 H  ## Retreive the available sample information column names clsAvailable(d) #>  [1] \"injorder\" \"pathcdf\"  \"filecdf\"  \"name.org\" \"remark\"   \"name\"     #>  [7] \"rep\"      \"day\"      \"class\"    \"new\"       ## Extract the values of the 'day' column clsExtract(d,'day') #>   [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 #>  [38] 2 2 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 #>  [75] 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 H H H H H H H H H H H #> [112] H H H H H H H H H #> Levels: 1 2 3 4 5 H  ## Remove the 'class' column d <- clsRemove(d,'class')  clsAvailable(d) #> [1] \"injorder\" \"pathcdf\"  \"filecdf\"  \"name.org\" \"remark\"   \"name\"     \"rep\"      #> [8] \"day\"      \"new\"       ## Rename the 'day' column to 'treatment' d <- clsRename(d,'day','treatment')  clsAvailable(d) #> [1] \"injorder\"  \"pathcdf\"   \"filecdf\"   \"name.org\"  \"remark\"    \"name\"      #> [7] \"rep\"       \"treatment\" \"new\"        ## Replace the values of the 'treatment' column d <- clsReplace(d,rep(1,nSamples(d)),'treatment')  clsExtract(d,'treatment') #>   [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 #>  [38] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 #>  [75] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 #> [112] 1 1 1 1 1 1 1 1 1"},{"path":"https://jasenfinch.github.io/metabolyseR/reference/correction.html","id":null,"dir":"Reference","previous_headings":"","what":"Batch/block correction — correctionCenter","title":"Batch/block correction — correctionCenter","text":"Correction batch/block differences.","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/correction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Batch/block correction — correctionCenter","text":"","code":"correctionCenter(d, block = \"block\", type = c(\"mean\", \"median\"))  # S4 method for AnalysisData correctionCenter(d, block = \"block\", type = c(\"mean\", \"median\"))"},{"path":"https://jasenfinch.github.io/metabolyseR/reference/correction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Batch/block correction — correctionCenter","text":"d S4 object class AnalysisData block sample information column name use containing sample block groupings type type average use","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/correction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Batch/block correction — correctionCenter","text":"S4 object class AnalysisData containing corrected data.","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/correction.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Batch/block correction — correctionCenter","text":"can sometimes artificial batch related variability introduced metabolomics analyses result analytical instrumentation sample preparation. appropriate randomised block design sample injection order, batch related variability can corrected using average centring correction method individual features.","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/correction.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Batch/block correction — correctionCenter","text":"correctionCenter: Correction using group average centring.","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/correction.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Batch/block correction — correctionCenter","text":"","code":"## Initial example data preparation library(metaboData)  d <- analysisData(abr1$neg[,200:300],abr1$fact) %>%   occupancyMaximum(occupancy = 2/3)   ## Group total ion count distributions prior to correction d %>%   plotTIC(by = 'day',colour = 'day')    ## Group total ion count distributions after group median correction d %>%   correctionCenter(block = 'day',type = 'median') %>%   plotTIC(by = 'day',colour = 'day')"},{"path":"https://jasenfinch.github.io/metabolyseR/reference/correlations.html","id":null,"dir":"Reference","previous_headings":"","what":"Feature correlation analysis — correlations","title":"Feature correlation analysis — correlations","text":"Feature correlation analysis.","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/correlations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Feature correlation analysis — correlations","text":"","code":"correlations(d, ...)  # S4 method for AnalysisData correlations(   d,   method = \"pearson\",   pAdjustMethod = \"bonferroni\",   corPvalue = 0.05,   minCoef = 0,   maxCor = Inf )  # S4 method for Analysis correlations(d)"},{"path":"https://jasenfinch.github.io/metabolyseR/reference/correlations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Feature correlation analysis — correlations","text":"d S4 object class AnalysisData ... arguments pass specific method method correlation method. One pearson spearman. pAdjustMethod p-value adjustment method. See ?p.adjust available methods. corPvalue p-value cut-threshold significance minCoef minimum absolute correlation coefficient threshold maxCor maximum number returned correlations","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/correlations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Feature correlation analysis — correlations","text":"tibble containing results significantly correlated features.","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/correlations.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Feature correlation analysis — correlations","text":"Correlation analyses can used identify associated features within data sets. can useful identifying clusters related features can used annotate metabolites within data sets. features compared returned table correlations thresholded specified p-value cut-.","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/correlations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Feature correlation analysis — correlations","text":"","code":"library(metaboData)  d <- analysisData(abr1$neg[,200:300],abr1$fact)  correlations(d) #> # A tibble: 130 × 7 #>    Feature1 Feature2 log2IntensityRatio coefficient `|coefficient|`           p #>    <chr>    <chr>                 <dbl>       <dbl>           <dbl>       <dbl> #>  1 N212     N227                 -0.884       0.980           0.980 0.0107      #>  2 N224     N286                  1.85        0.971           0.971 0.00612     #>  3 N215     N276                  0.227       0.965           0.965 0.0419      #>  4 N224     N265                  0.576       0.943           0.943 0.00138     #>  5 N201     N275                 -1.59        0.909           0.909 0.0264      #>  6 N213     N231                 -1.63        0.883           0.883 0           #>  7 N224     N225                 -0.792       0.863           0.863 0.000000176 #>  8 N258     N263                 -2.89        0.857           0.857 0.0181      #>  9 N267     N297                 -0.671       0.853           0.853 0           #> 10 N211     N291                 -1.55        0.831           0.831 0.00106     #> # ℹ 120 more rows #> # ℹ 1 more variable: n <int>"},{"path":"https://jasenfinch.github.io/metabolyseR/reference/correlationsParameters.html","id":null,"dir":"Reference","previous_headings":"","what":"Correlations parameters — correlationsParameters","title":"Correlations parameters — correlationsParameters","text":"Retrieve default parameters correlation analysis.","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/correlationsParameters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Correlations parameters — correlationsParameters","text":"","code":"correlationsParameters()"},{"path":"https://jasenfinch.github.io/metabolyseR/reference/correlationsParameters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Correlations parameters — correlationsParameters","text":"","code":"## Retrieve the default correlation parameters p <- correlationsParameters()  ## Assign the correlation parameters to analysis parameters cp <- analysisParameters('correlations') parameters(cp,'correlations') <- p  print(cp) #> Parameters: #> correlations #> \tmethod = pearson #> \tpAdjustMethod = bonferroni #> \tcorPvalue = 0.05 #> \tminCoef = 0 #> \tmaxCor = Inf"},{"path":"https://jasenfinch.github.io/metabolyseR/reference/impute.html","id":null,"dir":"Reference","previous_headings":"","what":"Missing data imputation — imputeAll","title":"Missing data imputation — imputeAll","text":"Impute missing values using random forest imputation.","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/impute.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Missing data imputation — imputeAll","text":"","code":"imputeAll(d, occupancy = 2/3, parallel = \"variables\", seed = 1234)  # S4 method for AnalysisData imputeAll(d, occupancy = 2/3, parallel = \"variables\", seed = 1234)  imputeClass(d, cls = \"class\", occupancy = 2/3, seed = 1234)  # S4 method for AnalysisData imputeClass(d, cls = \"class\", occupancy = 2/3, seed = 1234)"},{"path":"https://jasenfinch.github.io/metabolyseR/reference/impute.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Missing data imputation — imputeAll","text":"d S4 object class AnalysisData occupancy occupancy threshold missing values feature imputed parallel parallel type use. See ?missForest details seed random number seed cls info column use class labels","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/impute.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Missing data imputation — imputeAll","text":"S4 object class AnalysisData containing data imputation.","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/impute.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Missing data imputation — imputeAll","text":"Missing values can important influence downstream analyses zero values heavily influencing outcomes parametric tests. imputed important considerations highly related variable occupancy. methods provided allow aspects taken account utilise random forest imputation using missForest package.","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/impute.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Missing data imputation — imputeAll","text":"imputeAll: Impute missing values across sample features. imputeClass: Impute missing values class-wise.","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/impute.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Missing data imputation — imputeAll","text":"","code":"## Each of the following examples shows the application of each imputation method and then  ## a Linear Discriminant Analysis is plotted to show it's effect on the data structure.  ## Initial example data preparation library(metaboData)  d <- analysisData(abr1$neg[,200:250],abr1$fact) %>%   occupancyMaximum(occupancy = 2/3)  d %>%   plotLDA(cls = 'day')    ## Missing value imputation across all samples d %>%   imputeAll(parallel = 'no') %>%   plotLDA(cls = 'day')   ## Missing value imputation class-wise d %>%   imputeClass(cls = 'day') %>%   plotLDA(cls = 'day')"},{"path":"https://jasenfinch.github.io/metabolyseR/reference/io-parameters.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse/export analysis parameters — parseParameters","title":"Parse/export analysis parameters — parseParameters","text":"Import analysis parameters .yaml format file export AnalysisParameters object .yaml format.","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/io-parameters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse/export analysis parameters — parseParameters","text":"","code":"parseParameters(path)  exportParameters(d, file = \"analysis_parameters.yaml\")  # S4 method for AnalysisParameters exportParameters(d, file = \"analysis_parameters.yaml\")  # S4 method for Analysis exportParameters(d, file = \"analysis_parameters.yaml\")"},{"path":"https://jasenfinch.github.io/metabolyseR/reference/io-parameters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse/export analysis parameters — parseParameters","text":"path file path .yaml file parse d S4 object class AnalysisParameters Analysis file File name path export ","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/io-parameters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse/export analysis parameters — parseParameters","text":"","code":"## Import analysis parameters paramFile <- system.file('defaultParameters.yaml',package = 'metabolyseR') p <- parseParameters(paramFile) p #> Parameters: #> pre-treatment #> \tQC #> \t\toccupancyFilter #> \t\t\tcls = class #> \t\t\tQCidx = QC #> \t\t\toccupancy = 0.6666667 #> \t\timpute #> \t\t\tcls = class #> \t\t\tQCidx = QC #> \t\t\toccupancy = 0.6666667 #> \t\t\tparallel = variables #> \t\t\tseed = 1234 #> \t\tRSDfilter #> \t\t\tcls = class #> \t\t\tQCidx = QC #> \t\t\tRSDthresh = 50 #> \t\tremoveQC #> \t\t\tcls = class #> \t\t\tQCidx = QC #> \toccupancyFilter #> \t\tmaximum #> \t\t\tcls = class #> \t\t\toccupancy = 0.6666667 #> \timpute #> \t\tclass #> \t\t\tcls = class #> \t\t\toccupancy = 0.6666667 #> \t\t\tseed = 1234 #> \ttransform #> \t\tTICnorm #>  #> modelling #> \trandomForest #> \t\tcls = class #> \t\trf = list() #> \t\treps = 1 #> \t\tbinary = FALSE #> \t\tcomparisons = list() #> \t\tperm = 0 #> \t\treturnModels = FALSE #> \t\tseed = 1234 #>  #> correlations #> \tmethod = pearson #> \tpAdjustMethod = bonferroni #> \tcorPvalue = 0.05 #> \tminCoef = 0 #> \tmaxCor = Inf  if (FALSE) { ## Export analysis parameters exportParameters(p,file = 'analysis_parameters.yaml') }"},{"path":"https://jasenfinch.github.io/metabolyseR/reference/keep.html","id":null,"dir":"Reference","previous_headings":"","what":"Keep samples, classes or features — keepClasses","title":"Keep samples, classes or features — keepClasses","text":"Retain samples, classes features AnalysisData object.","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/keep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Keep samples, classes or features — keepClasses","text":"","code":"keepClasses(d, cls = \"class\", classes = c())  # S4 method for AnalysisData keepClasses(d, cls = \"class\", classes = c())  keepFeatures(d, features = character())  # S4 method for AnalysisData keepFeatures(d, features = character())  keepSamples(d, idx = \"fileOrder\", samples = c())  # S4 method for AnalysisData keepSamples(d, idx = \"fileOrder\", samples = c())"},{"path":"https://jasenfinch.github.io/metabolyseR/reference/keep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Keep samples, classes or features — keepClasses","text":"d S4 object class AnalysisData cls info column use class information classes classes keep features features remove idx info column containing sample indexes samples sample indexes keep","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/keep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Keep samples, classes or features — keepClasses","text":"S4 object class AnalysisData specified samples, classes features retained.","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/keep.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Keep samples, classes or features — keepClasses","text":"keepClasses: Keep classes. keepFeatures: Keep features. keepSamples: Keep samples.","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/keep.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Keep samples, classes or features — keepClasses","text":"","code":"library(metaboData)  d <- analysisData(abr1$neg[,200:300],abr1$fact)    ## Keep classes  d %>%    keepClasses(cls = 'day',classes = 'H') #>  #> AnalysisData object containing: #>  #> Samples: 20  #> Features: 101  #> Info: 9  #>     ## Keep features  d %>%    keepFeatures(features = c('N200','N201')) #>  #> AnalysisData object containing: #>  #> Samples: 120  #> Features: 2  #> Info: 9  #>     ## Keep samples  d %>%    keepSamples(idx = 'injorder',samples = c(1,10)) #>  #> AnalysisData object containing: #>  #> Samples: 2  #> Features: 101  #> Info: 9  #>"},{"path":"https://jasenfinch.github.io/metabolyseR/reference/linearRegression.html","id":null,"dir":"Reference","previous_headings":"","what":"Linear regression — linearRegression","title":"Linear regression — linearRegression","text":"Linear regression","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/linearRegression.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Linear regression — linearRegression","text":"","code":"linearRegression(   x,   cls = \"class\",   pAdjust = \"bonferroni\",   returnModels = FALSE )  # S4 method for AnalysisData linearRegression(   x,   cls = \"class\",   pAdjust = \"bonferroni\",   returnModels = FALSE )"},{"path":"https://jasenfinch.github.io/metabolyseR/reference/linearRegression.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Linear regression — linearRegression","text":"x S4 object class AnalysisData cls vector sample information column names regress pAdjust p value adjustment method returnModels models returned","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/linearRegression.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Linear regression — linearRegression","text":"S4 object class Univariate.","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/linearRegression.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Linear regression — linearRegression","text":"","code":"library(metaboData)  d <- analysisData(abr1$neg[,200:300],abr1$fact)  ## Perform linear regression lr_analysis <- linearRegression(d,cls = 'injorder')  ## Extract significant features explanatoryFeatures(lr_analysis) #> # A tibble: 5 × 15 #>   response feature r.squared adj.r.squared sigma statistic  p.value    df logLik #>   <chr>    <chr>       <dbl>         <dbl> <dbl>     <dbl>    <dbl> <dbl>  <dbl> #> 1 injorder N283        0.310        0.304   4.27      53.0 4.10e-11     1  -343. #> 2 injorder N221        0.140        0.133   5.87      19.3 2.50e- 5     1  -382. #> 3 injorder N255        0.119        0.111  11.1       15.9 1.17e- 4     1  -458. #> 4 injorder N267        0.118        0.111  26.4       15.8 1.22e- 4     1  -562. #> 5 injorder N297        0.107        0.0995 44.7       14.1 2.65e- 4     1  -625. #> # ℹ 6 more variables: AIC <dbl>, BIC <dbl>, deviance <dbl>, df.residual <int>, #> #   nobs <int>, adjusted.p.value <dbl>"},{"path":"https://jasenfinch.github.io/metabolyseR/reference/mds.html","id":null,"dir":"Reference","previous_headings":"","what":"Multidimensional scaling (MDS) — mds","title":"Multidimensional scaling (MDS) — mds","text":"Multidimensional scaling random forest proximities.","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/mds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multidimensional scaling (MDS) — mds","text":"","code":"mds(x, dimensions = 2, idx = NULL)  # S4 method for RandomForest mds(x, dimensions = 2, idx = NULL)  # S4 method for list mds(x, dimensions = 2, idx = NULL)  # S4 method for Analysis mds(x, dimensions = 2, idx = NULL)"},{"path":"https://jasenfinch.github.io/metabolyseR/reference/mds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multidimensional scaling (MDS) — mds","text":"x S4 object class RandomForest, Analysis list dimensions number dimensions data represented. idx sample information column use sample names. NULL, sample row number used. Sample names unique row data.","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/mds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Multidimensional scaling (MDS) — mds","text":"tibble containing scaled dimensions.","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/mds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Multidimensional scaling (MDS) — mds","text":"","code":"library(metaboData)  x <- analysisData(abr1$neg[,200:300],abr1$fact) %>%        occupancyMaximum(cls = 'day') %>%        transformTICnorm()         rf <- randomForest(x,cls = 'day')  mds(rf) #> # A tibble: 120 × 5 #>    response comparison  sample `dimension 1` `dimension 2` #>    <chr>    <chr>        <dbl>         <dbl>         <dbl> #>  1 day      1~2~3~4~5~H      1       -0.0129       -0.190  #>  2 day      1~2~3~4~5~H      2       -0.101        -0.254  #>  3 day      1~2~3~4~5~H      3       -0.0156        0.173  #>  4 day      1~2~3~4~5~H      4       -0.0896        0.147  #>  5 day      1~2~3~4~5~H      5        0.146        -0.0566 #>  6 day      1~2~3~4~5~H      6       -0.132         0.0946 #>  7 day      1~2~3~4~5~H      7       -0.0862       -0.195  #>  8 day      1~2~3~4~5~H      8        0.144        -0.0917 #>  9 day      1~2~3~4~5~H      9        0.0408       -0.110  #> 10 day      1~2~3~4~5~H     10       -0.146         0.155  #> # ℹ 110 more rows"},{"path":"https://jasenfinch.github.io/metabolyseR/reference/metabolyse.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform an analysis — metabolyse","title":"Perform an analysis — metabolyse","text":"Perform analyses containing multiple analysis element steps.","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/metabolyse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform an analysis — metabolyse","text":"","code":"metabolyse(data, info, parameters = analysisParameters(), verbose = TRUE)  reAnalyse(analysis, parameters = analysisParameters(), verbose = TRUE)  # S4 method for Analysis reAnalyse(analysis, parameters = analysisParameters(), verbose = TRUE)"},{"path":"https://jasenfinch.github.io/metabolyseR/reference/metabolyse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform an analysis — metabolyse","text":"data tibble data.frame containing data analyse info tibble data.frame containing data info meta data parameters object AnalysisParameters class containing parameters analysis. Default calls analysisParameters() verbose output printed console analysis object class Analysis containing previous analysis results","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/metabolyse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform an analysis — metabolyse","text":"S4 object class Analysis.","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/metabolyse.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Perform an analysis — metabolyse","text":"Routine analyses often made numerous steps parameters likely already previously established. emphasis convenience little code possible required. analyses, necessary analysis elements, order parameters first prepared analysis routine subsequently performed single step. metabolyse function provides utility, metabolome data, sample meta information analysis parameters provided. reAnalyse method can used perform analyses results.","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/metabolyse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform an analysis — metabolyse","text":"","code":"library(metaboData)  ## Generate analysis parameters p <- analysisParameters(c('pre-treatment','modelling'))  ## Alter pre-treatment and modelling parameters to use different methods parameters(p,'pre-treatment') <- preTreatmentParameters(   list(occupancyFilter = 'maximum',        transform = 'TICnorm') ) parameters(p,'modelling') <- modellingParameters('anova')  ## Change \"cls\" parameters  changeParameter(p,'cls') <- 'day'  ## Run analysis using a subset of the abr1 negative mode data set analysis <- metabolyse(abr1$neg[,1:200],                        abr1$fact,                        p) #>  #> metabolyseR  v0.15.1 Tue May 30 14:34:11 2023 #> ________________________________________________________________________________ #> Parameters: #> pre-treatment #> \toccupancyFilter #> \t\tmaximum #> \t\t\tcls = day #> \t\t\toccupancy = 2/3 #> \ttransform #> \t\tTICnorm #>  #> modelling #> \tanova #> \t\tcls = day #> \t\tpAdjust = bonferroni #> \t\tcomparisons = list() #> \t\treturnModels = FALSE #> ________________________________________________________________________________ #> Pre-treatment … #>  Pre-treatment \t✔ [0.6S] #> Modelling … #>  Modelling \t✔ [0.5S] #> ________________________________________________________________________________ #>  #> Complete! [1.1S]                         ## Re-analyse to include correlation analysis analysis <- reAnalyse(analysis,                       parameters = analysisParameters('correlations')) #>  #> metabolyseR v0.15.1 Tue May 30 14:34:12 2023 #> ________________________________________________________________________________ #> Parameters: #> correlations #> \tmethod = pearson #> \tpAdjustMethod = bonferroni #> \tcorPvalue = 0.05 #> \tminCoef = 0 #> \tmaxCor = Inf #> ________________________________________________________________________________ #>  #> Correlations … #>  Correlations \t✔ [0.1S] #> ________________________________________________________________________________ #>  #> Complete! [0.1S] #>   print(analysis) #>  #> metabolyseR v0.15.1 #> Analysis: #> \tTue May 30 14:34:11 2023 #>  #> \tRaw Data: #> \t\tNo. samples = 120 #> \t\tNo. features = 200 #>  #> \tPre-treated Data: #> \t\tTue May 30 14:34:11 2023 #> \t\tNo. samples = 120 #> \t\tNo. features = 48 #>  #> \tModelling: #> \t\tTue May 30 14:34:12 2023 #> \t\tMethods: anova #>  #> \tCorrelations: #> \t\tTue May 30 14:34:12 2023 #> \t\tNo. correlations = 140"},{"path":"https://jasenfinch.github.io/metabolyseR/reference/modelling-accessors.html","id":null,"dir":"Reference","previous_headings":"","what":"Modelling accessor methods — binaryComparisons","title":"Modelling accessor methods — binaryComparisons","text":"Methods accessing modelling results.","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/modelling-accessors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modelling accessor methods — binaryComparisons","text":"","code":"binaryComparisons(x, cls = \"class\")  # S4 method for AnalysisData binaryComparisons(x, cls = \"class\")  mtry(x, cls = \"class\")  # S4 method for AnalysisData mtry(x, cls = \"class\")  type(x)  # S4 method for RandomForest type(x)  # S4 method for Univariate type(x)  response(x)  # S4 method for RandomForest response(x)  # S4 method for Univariate response(x)  metrics(x)  # S4 method for RandomForest metrics(x)  # S4 method for list metrics(x)  # S4 method for Analysis metrics(x)  predictions(x)  # S4 method for RandomForest predictions(x)  # S4 method for list predictions(x)  # S4 method for Analysis predictions(x)  importanceMetrics(x)  # S4 method for RandomForest importanceMetrics(x)  importance(x)  # S4 method for RandomForest importance(x)  # S4 method for Univariate importance(x)  # S4 method for list importance(x)  # S4 method for Analysis importance(x)  proximity(x, idx = NULL)  # S4 method for RandomForest proximity(x, idx = NULL)  # S4 method for list proximity(x, idx = NULL)  # S4 method for Analysis proximity(x, idx = NULL)  explanatoryFeatures(x, ...)  # S4 method for Univariate explanatoryFeatures(   x,   threshold = 0.05,   value = c(\"adjusted.p.value\", \"p.value\") )  # S4 method for RandomForest explanatoryFeatures(   x,   metric = \"false_positive_rate\",   value = c(\"value\", \"p-value\", \"adjusted_p-value\"),   threshold = 0.05 )  # S4 method for list explanatoryFeatures(x, ...)  # S4 method for Analysis explanatoryFeatures(x, ...)"},{"path":"https://jasenfinch.github.io/metabolyseR/reference/modelling-accessors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Modelling accessor methods — binaryComparisons","text":"x S4 object class AnalysisData,RandomForest, Univariate, Analysis list. cls sample information column use idx sample information column use sample names. NULL, sample row number used. Sample names unique row data. ... arguments parse method specific class threshold threshold explanatory features extracted value importance value threshold. See usage section possible values class. metric importance metric retrieve explanatory features","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/modelling-accessors.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Modelling accessor methods — binaryComparisons","text":"binaryComparisons: Return vector possible binary comparisons given sample information column. mtry: Return default mtry random forest parameter value given sample information column. type: Return type random forest analysis. response: Return response variable name used random forest analysis. metrics: Retrieve model performance metrics random forest analysis predictions: Retrieve bag model response predictions random forest analysis. importanceMetrics: Retrieve available feature importance metrics random forest analysis. importance: Retrieve feature importance results. proximity: Retrieve random forest sample proximities. explanatoryFeatures: Retrieve explanatory features.","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/modelling-accessors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Modelling accessor methods — binaryComparisons","text":"","code":"library(metaboData)  d <- analysisData(abr1$neg[,200:300],abr1$fact)  ## Return possible binary comparisons for the `day` response column binaryComparisons(d,cls = 'day') #>  [1] \"1~2\" \"1~3\" \"1~4\" \"1~5\" \"1~H\" \"2~3\" \"2~4\" \"2~5\" \"2~H\" \"3~4\" \"3~5\" \"3~H\" #> [13] \"4~5\" \"4~H\" \"5~H\"  ## Return the default random forest `mtry` parameter for the `day` response column mtry(d,cls = 'day') #> [1] 10  ## Perform random forest analysis rf_analysis <- randomForest(d,cls = 'day')  ## Return the type of random forest type(rf_analysis) #> [1] \"classification\"  ## Return the response variable name used response(rf_analysis) #> [1] \"day\"  ## Retrieve the model performance metrics metrics(rf_analysis) #> # A tibble: 4 × 5 #>   response comparison  .metric  .estimator .estimate #>   <chr>    <chr>       <chr>    <chr>          <dbl> #> 1 day      1~2~3~4~5~H accuracy multiclass    0.567  #> 2 day      1~2~3~4~5~H kap      multiclass    0.48   #> 3 day      1~2~3~4~5~H margin   NA            0.0424 #> 4 day      1~2~3~4~5~H roc_auc  hand_till     0.886   ## Retrieve the out of bag model response predictions predictions(rf_analysis) #> # A tibble: 120 × 13 #>    response comparison rep   sample obs   pred  margin    `1`   `2`   `3`    `4` #>    <chr>    <chr>      <chr>  <int> <fct> <fct> <marg>  <dbl> <dbl> <dbl>  <dbl> #>  1 day      1~2~3~4~5… 1          1 2     2      0.05… 0.191  0.273 0.113 0.124  #>  2 day      1~2~3~4~5… 1          2 3     2     -0.10… 0.0782 0.397 0.291 0.0838 #>  3 day      1~2~3~4~5… 1          3 4     4      0.02… 0.197  0.149 0.144 0.223  #>  4 day      1~2~3~4~5… 1          4 1     H     -0.02… 0.210  0.2   0.210 0.0769 #>  5 day      1~2~3~4~5… 1          5 2     2      0.12… 0.0843 0.343 0.197 0.152  #>  6 day      1~2~3~4~5… 1          6 1     H     -0.09… 0.283  0.174 0.114 0.0272 #>  7 day      1~2~3~4~5… 1          7 2     H     -0.17… 0.0788 0.241 0.217 0.0345 #>  8 day      1~2~3~4~5… 1          8 4     4      0.02… 0.075  0.16  0.27  0.295  #>  9 day      1~2~3~4~5… 1          9 H     3     -0.10… 0.168  0.196 0.261 0.136  #> 10 day      1~2~3~4~5… 1         10 H     1     -0.01… 0.306  0.167 0.144 0.0722 #> # ℹ 110 more rows #> # ℹ 2 more variables: `5` <dbl>, H <dbl>  ## Show the available feature importance metrics importanceMetrics(rf_analysis) #>  [1] \"1\"                    \"2\"                    \"3\"                    #>  [4] \"4\"                    \"5\"                    \"H\"                    #>  [7] \"MeanDecreaseAccuracy\" \"MeanDecreaseGini\"     \"false_positive_rate\"  #> [10] \"selection_frequency\"   ## Retrieve the feature importance results importance(rf_analysis) #> # A tibble: 1,010 × 5 #>    response comparison  feature metric                  value #>    <chr>    <chr>       <chr>   <chr>                   <dbl> #>  1 day      1~2~3~4~5~H N200    1                    0        #>  2 day      1~2~3~4~5~H N200    2                    0        #>  3 day      1~2~3~4~5~H N200    3                    0        #>  4 day      1~2~3~4~5~H N200    4                    0        #>  5 day      1~2~3~4~5~H N200    5                    0        #>  6 day      1~2~3~4~5~H N200    H                    0        #>  7 day      1~2~3~4~5~H N200    MeanDecreaseAccuracy 0        #>  8 day      1~2~3~4~5~H N200    MeanDecreaseGini     6.00e- 2 #>  9 day      1~2~3~4~5~H N200    false_positive_rate  2.35e-40 #> 10 day      1~2~3~4~5~H N200    selection_frequency  1.6 e+ 1 #> # ℹ 1,000 more rows  ## Retrieve the sample proximities proximity(rf_analysis) #> # A tibble: 14,400 × 5 #>    response comparison  sample1 sample2 proximity #>    <chr>    <chr>         <int>   <dbl>     <dbl> #>  1 day      1~2~3~4~5~H       1       1    1      #>  2 day      1~2~3~4~5~H       1       2    0.0704 #>  3 day      1~2~3~4~5~H       1       3    0.0580 #>  4 day      1~2~3~4~5~H       1       4    0.0930 #>  5 day      1~2~3~4~5~H       1       5    0.0556 #>  6 day      1~2~3~4~5~H       1       6    0.0435 #>  7 day      1~2~3~4~5~H       1       7    0.0556 #>  8 day      1~2~3~4~5~H       1       8    0.0441 #>  9 day      1~2~3~4~5~H       1       9    0.106  #> 10 day      1~2~3~4~5~H       1      10    0      #> # ℹ 14,390 more rows  ## Retrieve the explanatory features explanatoryFeatures(rf_analysis,metric = 'false_positive_rate',threshold = 0.05) #> # A tibble: 35 × 5 #>    response comparison  feature metric                  value #>    <chr>    <chr>       <chr>   <chr>                   <dbl> #>  1 day      1~2~3~4~5~H N229    false_positive_rate 5.75e-129 #>  2 day      1~2~3~4~5~H N259    false_positive_rate 4.88e- 72 #>  3 day      1~2~3~4~5~H N277    false_positive_rate 3.98e- 67 #>  4 day      1~2~3~4~5~H N255    false_positive_rate 3.27e- 53 #>  5 day      1~2~3~4~5~H N213    false_positive_rate 4.92e- 45 #>  6 day      1~2~3~4~5~H N200    false_positive_rate 2.35e- 40 #>  7 day      1~2~3~4~5~H N221    false_positive_rate 1.80e- 38 #>  8 day      1~2~3~4~5~H N299    false_positive_rate 4.91e- 36 #>  9 day      1~2~3~4~5~H N245    false_positive_rate 9.75e- 27 #> 10 day      1~2~3~4~5~H N279    false_positive_rate 2.38e- 20 #> # ℹ 25 more rows"},{"path":"https://jasenfinch.github.io/metabolyseR/reference/modelling-parameters.html","id":null,"dir":"Reference","previous_headings":"","what":"Modelling parameters — modellingMethods","title":"Modelling parameters — modellingMethods","text":"Retrieve available modelling methods parameters.","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/modelling-parameters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modelling parameters — modellingMethods","text":"","code":"modellingMethods()  modellingParameters(methods)"},{"path":"https://jasenfinch.github.io/metabolyseR/reference/modelling-parameters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Modelling parameters — modellingMethods","text":"methods character vector available modelling methods","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/modelling-parameters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Modelling parameters — modellingMethods","text":"","code":"## Retrieve the available modelling methods modellingMethods() #> [1] \"anova\"            \"ttest\"            \"linearRegression\" \"randomForest\"      ## Retrieve the modelling parameters for the anova method p <- modellingParameters('anova')  ## Assign the modelling parameters to analysis parameters mp <- analysisParameters('modelling')  parameters(mp,'modelling') <- p  print(mp) #> Parameters: #> modelling #> \tanova #> \t\tcls = class #> \t\tpAdjust = bonferroni #> \t\tcomparisons = list() #> \t\treturnModels = FALSE #>"},{"path":"https://jasenfinch.github.io/metabolyseR/reference/occupancy.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate feature class occupancies — occupancy","title":"Calculate feature class occupancies — occupancy","text":"Calculate class occupancies features AnalysisData object.","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/occupancy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate feature class occupancies — occupancy","text":"","code":"occupancy(d, cls = \"class\")  # S4 method for AnalysisData occupancy(d, cls = \"class\")"},{"path":"https://jasenfinch.github.io/metabolyseR/reference/occupancy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate feature class occupancies — occupancy","text":"d S4 object class AnalysisData cls sample information column use compute class occupancies","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/occupancy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate feature class occupancies — occupancy","text":"tibble containing feature class proportional occupancies.","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/occupancy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate feature class occupancies — occupancy","text":"","code":"library(metaboData)  d <- analysisData(abr1$neg[,200:300],abr1$fact)  occupancy(d,cls = 'day') #> # A tibble: 596 × 5 #>    day   Feature     N `Class total` Occupancy #>    <fct> <chr>   <dbl>         <int>     <dbl> #>  1 1     N200        1            20      0.05 #>  2 1     N201        3            20      0.15 #>  3 1     N202        3            20      0.15 #>  4 1     N203       19            20      0.95 #>  5 1     N204        4            20      0.2  #>  6 1     N205       17            20      0.85 #>  7 1     N206        4            20      0.2  #>  8 1     N207        8            20      0.4  #>  9 1     N208        7            20      0.35 #> 10 1     N209       16            20      0.8  #> # ℹ 586 more rows"},{"path":"https://jasenfinch.github.io/metabolyseR/reference/occupancyFilter.html","id":null,"dir":"Reference","previous_headings":"","what":"Feature occupancy filtering — occupancyMaximum","title":"Feature occupancy filtering — occupancyMaximum","text":"Feature filtering based class occupancy.","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/occupancyFilter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Feature occupancy filtering — occupancyMaximum","text":"","code":"occupancyMaximum(d, cls = \"class\", occupancy = 2/3)  # S4 method for AnalysisData occupancyMaximum(d, cls = \"class\", occupancy = 2/3)  occupancyMinimum(d, cls = \"class\", occupancy = 2/3)  # S4 method for AnalysisData occupancyMinimum(d, cls = \"class\", occupancy = 2/3)"},{"path":"https://jasenfinch.github.io/metabolyseR/reference/occupancyFilter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Feature occupancy filtering — occupancyMaximum","text":"d S4 object class AnalysisData cls sample information column name use class data occupancy feature occupancy filtering threshold, features removed","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/occupancyFilter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Feature occupancy filtering — occupancyMaximum","text":"S4 object class AnalysisData containing class occupancy filtered data.","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/occupancyFilter.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Feature occupancy filtering — occupancyMaximum","text":"Occupancy provides useful metric filter poorly represented features (features containing majority zero missing values). occupancy threshold provides means specifying majority variables threshold excluded analyses. However, can complicated underlying class structure present within data variable may well represented within one class another.","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/occupancyFilter.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Feature occupancy filtering — occupancyMaximum","text":"occupancyMaximium: Maximum occupancy threshold feature filtering. maximum occupancy across classes threshold. Therefore, feature retained, single class needs occupancy threshold. occupancyMinimum: Minimum occupancy threshold feature filtering. minimum occupancy across classes required threshold. Therefore, feature retained, classes need occupancy threshold.","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/occupancyFilter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Feature occupancy filtering — occupancyMaximum","text":"","code":"## Each of the following examples shows the application  ## of the feature occupancy filtering method method and  ## then a Principle Component Analysis is plotted to show  ## its effect on the data structure.  ## Initial example data preparation library(metaboData)  d <- analysisData(abr1$neg[,200:300],abr1$fact)   ## Maximum occupancy threshold feature filtering d %>%   occupancyMaximum(cls = 'day') %>%   plotPCA(cls = 'day')    ## Minimum occupancy threshold feature filtering d %>%   occupancyMinimum(cls = 'day') %>%   plotPCA(cls = 'day')"},{"path":"https://jasenfinch.github.io/metabolyseR/reference/parameters.html","id":null,"dir":"Reference","previous_headings":"","what":"Get or set analysis parameters — parameters","title":"Get or set analysis parameters — parameters","text":"Get set parameters AnalysisParameters Analysis class objects.","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/parameters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get or set analysis parameters — parameters","text":"","code":"parameters(d, ...)  # S4 method for AnalysisParameters parameters(d, element)  # S4 method for Analysis parameters(d)  parameters(d, element) <- value  # S4 method for AnalysisParameters parameters(d, element) <- value  # S4 method for Analysis parameters(d) <- value"},{"path":"https://jasenfinch.github.io/metabolyseR/reference/parameters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get or set analysis parameters — parameters","text":"d S4 object class AnalysisParameters Analysis ... arguments pass appropriate method element analysis element parameters extract assign. one returned analysisElements() value list containing parameter values","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/parameters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get or set analysis parameters — parameters","text":"","code":"p <- analysisParameters('pre-treatment')  ## extract pre-treatment parameters parameters(p,'pre-treatment') #> $QC #> $QC$occupancyFilter #> $QC$occupancyFilter$cls #> [1] \"class\" #>  #> $QC$occupancyFilter$QCidx #> [1] \"QC\" #>  #> $QC$occupancyFilter$occupancy #> 2/3 #>  #>  #> $QC$impute #> $QC$impute$cls #> [1] \"class\" #>  #> $QC$impute$QCidx #> [1] \"QC\" #>  #> $QC$impute$occupancy #> 2/3 #>  #> $QC$impute$parallel #> [1] \"variables\" #>  #> $QC$impute$seed #> [1] 1234 #>  #>  #> $QC$RSDfilter #> $QC$RSDfilter$cls #> [1] \"class\" #>  #> $QC$RSDfilter$QCidx #> [1] \"QC\" #>  #> $QC$RSDfilter$RSDthresh #> [1] 50 #>  #>  #> $QC$removeQC #> $QC$removeQC$cls #> [1] \"class\" #>  #> $QC$removeQC$QCidx #> [1] \"QC\" #>  #>  #>  #> $occupancyFilter #> $occupancyFilter$maximum #> $occupancyFilter$maximum$cls #> [1] \"class\" #>  #> $occupancyFilter$maximum$occupancy #> 2/3 #>  #>  #>  #> $impute #> $impute$class #> $impute$class$cls #> [1] \"class\" #>  #> $impute$class$occupancy #> 2/3 #>  #> $impute$class$seed #> [1] 1234 #>  #>  #>  #> $transform #> $transform$TICnorm #> named list() #>  #>   ## set pre-treatment parameters parameters(p,'pre-treatment') <- preTreatmentParameters(   list(     remove = 'classes',     QC = c('RSDfilter','removeQC'),     transform = 'TICnorm'   ) )  print(p) #> Parameters: #> pre-treatment #> \tremove #> \t\tclasses #> \t\t\tcls = class #> \t\t\tclasses = c() #> \tQC #> \t\tRSDfilter #> \t\t\tcls = class #> \t\t\tQCidx = QC #> \t\t\tRSDthresh = 50 #> \t\tremoveQC #> \t\t\tcls = class #> \t\t\tQCidx = QC #> \ttransform #> \t\tTICnorm #>"},{"path":"https://jasenfinch.github.io/metabolyseR/reference/plotExplanatoryHeatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Heatmap plot of explantory features — plotExplanatoryHeatmap","title":"Heatmap plot of explantory features — plotExplanatoryHeatmap","text":"Plot heatmap explanatory features.","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/plotExplanatoryHeatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Heatmap plot of explantory features — plotExplanatoryHeatmap","text":"","code":"plotExplanatoryHeatmap(x, ...)  # S4 method for Univariate plotExplanatoryHeatmap(   x,   threshold = 0.05,   title = \"\",   distanceMeasure = \"euclidean\",   clusterMethod = \"ward.D2\",   featureNames = TRUE,   dendrogram = TRUE,   featureLimit = Inf,   ... )  # S4 method for RandomForest plotExplanatoryHeatmap(   x,   metric = \"false_positive_rate\",   threshold = 0.05,   title = \"\",   distanceMeasure = \"euclidean\",   clusterMethod = \"ward.D2\",   featureNames = TRUE,   dendrogram = TRUE,   featureLimit = Inf,   ... )  # S4 method for list plotExplanatoryHeatmap(   x,   threshold = 0.05,   distanceMeasure = \"euclidean\",   clusterMethod = \"ward.D2\",   featureNames = TRUE,   featureLimit = Inf )  # S4 method for Analysis plotExplanatoryHeatmap(   x,   threshold = 0.05,   distanceMeasure = \"euclidean\",   clusterMethod = \"ward.D2\",   featureNames = TRUE,   featureLimit = Inf )"},{"path":"https://jasenfinch.github.io/metabolyseR/reference/plotExplanatoryHeatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Heatmap plot of explantory features — plotExplanatoryHeatmap","text":"x object class Univariate, RandomForest Analysis ... arguments pass method explanatoryFeatures() threshold score threshold use specifying explanatory features title plot title distanceMeasure distance measure use clustering. See details. clusterMethod clustering method use. See details featureNames feature names plotted? dendrogram TRUE/FALSE. dendrogram plotted? featureLimit maximum number features plot metric importance metric retrieve explanatory features","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/plotExplanatoryHeatmap.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Heatmap plot of explantory features — plotExplanatoryHeatmap","text":"Distance measures can one can used method argument dist(). Cluster methods can one can used method argument hclust().","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/plotExplanatoryHeatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Heatmap plot of explantory features — plotExplanatoryHeatmap","text":"","code":"library(metaboData) x <- analysisData(data = abr1$neg[,200:300],info = abr1$fact)  ## random forest classification example random_forest <- randomForest(x,cls = 'day')  plotExplanatoryHeatmap(random_forest)   ## random forest regression example random_forest <- randomForest(x,cls = 'injorder')  plotExplanatoryHeatmap(random_forest,metric = '%IncMSE',threshold = 2)"},{"path":"https://jasenfinch.github.io/metabolyseR/reference/plotFeature.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a feature — plotFeature","title":"Plot a feature — plotFeature","text":"Plot trend feature.","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/plotFeature.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a feature — plotFeature","text":"","code":"plotFeature(analysis, feature, cls = \"class\", label = NULL, labelSize = 2, ...)  # S4 method for AnalysisData plotFeature(analysis, feature, cls = \"class\", label = NULL, labelSize = 2)  # S4 method for Analysis plotFeature(   analysis,   feature,   cls = \"class\",   label = NULL,   labelSize = 2,   type = c(\"pre-treated\", \"raw\") )"},{"path":"https://jasenfinch.github.io/metabolyseR/reference/plotFeature.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a feature — plotFeature","text":"analysis object class AnalysisData `` Analysis` feature feature name plot cls information column use class labels label information column use sample labels labelSize sample label size ... arguments pass appropriate method type raw pre-treated data plot","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/plotFeature.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a feature — plotFeature","text":"","code":"d <- analysisData(metaboData::abr1$neg,                   metaboData::abr1$fact)  ## Plot a categorical response variable plotFeature(d,'N133',cls = 'day')   ## Plot a continuous response variable plotFeature(d,'N133',cls = 'injorder')"},{"path":"https://jasenfinch.github.io/metabolyseR/reference/plotImportance.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot feature importance — plotImportance","title":"Plot feature importance — plotImportance","text":"Plot Univariate random forest feature importance.","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/plotImportance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot feature importance — plotImportance","text":"","code":"plotImportance(x, ...)  # S4 method for Univariate plotImportance(x, response = \"class\", rank = TRUE, threshold = 0.05)  # S4 method for RandomForest plotImportance(x, metric = \"false_positive_rate\", rank = TRUE)  # S4 method for list plotImportance(x, metric = \"false_positive_rate\")"},{"path":"https://jasenfinch.github.io/metabolyseR/reference/plotImportance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot feature importance — plotImportance","text":"x S4 object class Univariate RandomForest ... arguments pass specific method response response results plot rank rank feature order plotting threshold explanatory threshold line output plot metric importance metric plot","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/plotImportance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot feature importance — plotImportance","text":"","code":"library(metaboData)  x <- analysisData(abr1$neg[,200:300],abr1$fact) %>%        keepClasses(cls = 'day',classes = c('H','1','5')) %>%         occupancyMaximum(cls = 'day') %>%        transformTICnorm()         rf <- randomForest(x,cls = 'day')  plotImportance(rf,rank = FALSE)"},{"path":"https://jasenfinch.github.io/metabolyseR/reference/plotLDA.html","id":null,"dir":"Reference","previous_headings":"","what":"Principle Component - Linear Discriminant Analysis plot — plotLDA","title":"Principle Component - Linear Discriminant Analysis plot — plotLDA","text":"Plot linear discriminant analysis results pre-treated data","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/plotLDA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Principle Component - Linear Discriminant Analysis plot — plotLDA","text":"","code":"plotLDA(   analysis,   cls = \"class\",   label = NULL,   scale = TRUE,   center = TRUE,   xAxis = \"DF1\",   yAxis = \"DF2\",   shape = FALSE,   ellipses = TRUE,   title = \"PC-LDA\",   legendPosition = \"bottom\",   labelSize = 2,   ... )  # S4 method for AnalysisData plotLDA(   analysis,   cls = \"class\",   label = NULL,   scale = TRUE,   center = TRUE,   xAxis = \"DF1\",   yAxis = \"DF2\",   shape = FALSE,   ellipses = TRUE,   title = \"PC-LDA\",   legendPosition = \"bottom\",   labelSize = 2 )  # S4 method for Analysis plotLDA(   analysis,   cls = \"class\",   label = NULL,   scale = TRUE,   center = TRUE,   xAxis = \"DF1\",   yAxis = \"DF2\",   shape = FALSE,   ellipses = TRUE,   title = \"PC-LDA\",   legendPosition = \"bottom\",   labelSize = 2,   type = c(\"pre-treated\", \"raw\") )"},{"path":"https://jasenfinch.github.io/metabolyseR/reference/plotLDA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Principle Component - Linear Discriminant Analysis plot — plotLDA","text":"analysis S4 object class AnalysisData Analysis cls name sample information column use class labels label name sample information column use sample labels. Set NULL labels. scale scale data center center data xAxis principle component plot x-axis yAxis principle component plot y-axis shape TRUE/FALSE use shape aesthetic plot points. Defaults TRUE number classes greater 12 ellipses TRUE/FALSE, plot multivariate normal distribution 95\\ confidence ellipses class title plot title legendPosition legend position pass legend.position argument ggplot2::theme. Set \"none\" remove legend. labelSize label size. Ignored label NULL ... arguments pass appropriate method type raw pre-treated data plot","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/plotLDA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Principle Component - Linear Discriminant Analysis plot — plotLDA","text":"","code":"library(metaboData)  d <- analysisData(abr1$neg,abr1$fact) %>%   occupancyMaximum(cls = 'day')  ## LDA plot plotLDA(d,cls = 'day')"},{"path":"https://jasenfinch.github.io/metabolyseR/reference/plotMDS.html","id":null,"dir":"Reference","previous_headings":"","what":"Multidimensional scaling (MDS) plot — plotMDS","title":"Multidimensional scaling (MDS) plot — plotMDS","text":"Plot multidimensional scaling plot RandomForest class object.","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/plotMDS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multidimensional scaling (MDS) plot — plotMDS","text":"","code":"plotMDS(   x,   cls = \"class\",   label = NULL,   shape = FALSE,   ellipses = TRUE,   title = \"\",   legendPosition = \"bottom\",   labelSize = 2 )  # S4 method for RandomForest plotMDS(   x,   cls = \"class\",   label = NULL,   shape = FALSE,   ellipses = TRUE,   title = \"\",   legendPosition = \"bottom\",   labelSize = 2 )  # S4 method for list plotMDS(   x,   label = NULL,   shape = FALSE,   ellipses = TRUE,   title = \"\",   legendPosition = \"bottom\",   labelSize = 2 )"},{"path":"https://jasenfinch.github.io/metabolyseR/reference/plotMDS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multidimensional scaling (MDS) plot — plotMDS","text":"x S4 object class RandomForest cls sample information column use sample labelling, Set NULL labelling. label sample information column use sample labels. Set NULL labels. shape TRUE/FALSE use shape aesthetic plot points. Defaults TRUE number classes greater 12 ellipses TRUE/FALSE, plot multivariate normal distribution 95% confidence ellipses class title plot title legendPosition legend position pass legend.position argument ggplot2::theme. Set \"none\" remove legend. labelSize label size. Ignored label NULL","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/plotMDS.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Multidimensional scaling (MDS) plot — plotMDS","text":"","code":"library(metaboData)  x <- analysisData(abr1$neg[,200:300],abr1$fact) %>%        occupancyMaximum(cls = 'day') %>%        transformTICnorm()         rf <- randomForest(x,cls = 'day')  plotMDS(rf,cls = 'day')"},{"path":"https://jasenfinch.github.io/metabolyseR/reference/plotMetrics.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot model performance metrics — plotMetrics","title":"Plot model performance metrics — plotMetrics","text":"Plot random forest model performance metrics","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/plotMetrics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot model performance metrics — plotMetrics","text":"","code":"plotMetrics(x, response = \"class\")  # S4 method for RandomForest plotMetrics(x)  # S4 method for list plotMetrics(x)"},{"path":"https://jasenfinch.github.io/metabolyseR/reference/plotMetrics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot model performance metrics — plotMetrics","text":"x S4 object class RandomForest response response results plot","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/plotMetrics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot model performance metrics — plotMetrics","text":"","code":"library(metaboData)  x <- analysisData(abr1$neg[,200:300],abr1$fact) %>%        keepClasses(cls = 'day',classes = c('H','1','5')) %>%         occupancyMaximum(cls = 'day') %>%        transformTICnorm()         rf <- randomForest(x,cls = 'day',binary = TRUE)  plotMetrics(rf,response = 'day')"},{"path":"https://jasenfinch.github.io/metabolyseR/reference/plotOccupancy.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot class occupancy distributions — plotOccupancy","title":"Plot class occupancy distributions — plotOccupancy","text":"Plot class occupancy distributions.","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/plotOccupancy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot class occupancy distributions — plotOccupancy","text":"","code":"plotOccupancy(x, cls = \"class\", ...)  # S4 method for AnalysisData plotOccupancy(x, cls = \"class\")  # S4 method for Analysis plotOccupancy(x, cls = \"class\", type = \"raw\")"},{"path":"https://jasenfinch.github.io/metabolyseR/reference/plotOccupancy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot class occupancy distributions — plotOccupancy","text":"x S4 object class AnalysisData Analysis cls sample information column use class labels ... arguments pass appropriate method type raw preTreated data plot","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/plotOccupancy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot class occupancy distributions — plotOccupancy","text":"","code":"library(metaboData)  d <- analysisData(abr1$neg,abr1$fact)  ## Plot class occupancy distributions plotOccupancy(d,cls = 'day')"},{"path":"https://jasenfinch.github.io/metabolyseR/reference/plotPCA.html","id":null,"dir":"Reference","previous_headings":"","what":"Principle Component Analysis plot — plotPCA","title":"Principle Component Analysis plot — plotPCA","text":"Plot Principle Component Analysis results.","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/plotPCA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Principle Component Analysis plot — plotPCA","text":"","code":"plotPCA(   analysis,   cls = \"class\",   label = NULL,   scale = TRUE,   center = TRUE,   xAxis = \"PC1\",   yAxis = \"PC2\",   shape = FALSE,   ellipses = TRUE,   title = \"PCA\",   legendPosition = \"bottom\",   labelSize = 2,   ... )  # S4 method for AnalysisData plotPCA(   analysis,   cls = \"class\",   label = NULL,   scale = TRUE,   center = TRUE,   xAxis = \"PC1\",   yAxis = \"PC2\",   shape = FALSE,   ellipses = TRUE,   title = \"Principle Component Analysis (PCA)\",   legendPosition = \"bottom\",   labelSize = 2 )  # S4 method for Analysis plotPCA(   analysis,   cls = \"class\",   label = NULL,   scale = TRUE,   center = TRUE,   xAxis = \"PC1\",   yAxis = \"PC2\",   shape = FALSE,   ellipses = TRUE,   title = \"PCA\",   legendPosition = \"bottom\",   labelSize = 2,   type = c(\"pre-treated\", \"raw\") )"},{"path":"https://jasenfinch.github.io/metabolyseR/reference/plotPCA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Principle Component Analysis plot — plotPCA","text":"analysis object class AnalysisData Analysis cls name class information column use sample labelling label name class information column use sample labels. Set NULL labels. scale scale data center center data xAxis principle component plot x-axis yAxis principle component plot y-axis shape TRUE/FALSE use shape aesthetic plot points. Defaults TRUE number classes greater 12 ellipses TRUE/FALSE, plot multivariate normal distribution 95\\ confidence ellipses class title plot title legendPosition legend position pass legend.position argument ggplot2::theme. Set \"none\" remove legend. labelSize label size. Ignored label NULL ... arguments pass appropriate method type raw pre-treated data plot","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/plotPCA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Principle Component Analysis plot — plotPCA","text":"","code":"library(metaboData)  d <- analysisData(abr1$neg,abr1$fact) %>%   occupancyMaximum(cls = 'day')  ## PCA plot plotPCA(d,cls = 'day')"},{"path":"https://jasenfinch.github.io/metabolyseR/reference/plotROC.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot receiver operator characteristic (ROC) curves — plotROC","title":"Plot receiver operator characteristic (ROC) curves — plotROC","text":"Plot receiver operator characteristic curves RandomForest class object.","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/plotROC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot receiver operator characteristic (ROC) curves — plotROC","text":"","code":"plotROC(x, title = \"\", legendPosition = \"bottom\")  # S4 method for RandomForest plotROC(x, title = \"\", legendPosition = \"bottom\")  # S4 method for list plotROC(x, title = \"\", legendPosition = \"bottom\")"},{"path":"https://jasenfinch.github.io/metabolyseR/reference/plotROC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot receiver operator characteristic (ROC) curves — plotROC","text":"x S4 object class RandomForest title plot title legendPosition legend position pass legend.position argument ggplot2::theme. Set \"none\" remove legend.","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/plotROC.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot receiver operator characteristic (ROC) curves — plotROC","text":"","code":"library(metaboData)  x <- analysisData(abr1$neg[,200:300],abr1$fact) %>%        occupancyMaximum(cls = 'day') %>%        transformTICnorm()         rf <- randomForest(x,cls = 'day')  plotROC(rf)"},{"path":"https://jasenfinch.github.io/metabolyseR/reference/plotRSD.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot RSD distributions — plotRSD","title":"Plot RSD distributions — plotRSD","text":"Plot RSD distributions raw data quality control samples.","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/plotRSD.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot RSD distributions — plotRSD","text":"","code":"plotRSD(analysis, cls = \"class\", ...)  # S4 method for AnalysisData plotRSD(analysis, cls = \"class\")  # S4 method for Analysis plotRSD(analysis, cls = \"class\", type = \"raw\")"},{"path":"https://jasenfinch.github.io/metabolyseR/reference/plotRSD.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot RSD distributions — plotRSD","text":"analysis object class AnalysisData Analysis cls information column use class labels ... arguments pass appropriate method type raw pre-treated data plot","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/plotRSD.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot RSD distributions — plotRSD","text":"","code":"library(metaboData)  d <- analysisData(abr1$neg,abr1$fact)  ## Plot class RSD distributions plotRSD(d,cls = 'day') #> Warning: Removed 716 rows containing non-finite values (`stat_density()`). #> Warning: Removed 6 rows containing missing values (`geom_line()`)."},{"path":"https://jasenfinch.github.io/metabolyseR/reference/plotSupervisedRF.html","id":null,"dir":"Reference","previous_headings":"","what":"Supervised random forest MDS plot — plotSupervisedRF","title":"Supervised random forest MDS plot — plotSupervisedRF","text":"multidimensional scaling (MDS) plot supervised random forest analysis","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/plotSupervisedRF.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Supervised random forest MDS plot — plotSupervisedRF","text":"","code":"plotSupervisedRF(   x,   cls = \"class\",   rf = list(),   label = NULL,   shape = FALSE,   ellipses = TRUE,   ROC = TRUE,   seed = 1234,   title = \"\",   legendPosition = \"bottom\",   labelSize = 2,   ... )  # S4 method for AnalysisData plotSupervisedRF(   x,   cls = \"class\",   rf = list(),   label = NULL,   shape = FALSE,   ellipses = TRUE,   ROC = TRUE,   seed = 1234,   title = \"\",   legendPosition = \"bottom\",   labelSize = 2 )  # S4 method for Analysis plotSupervisedRF(   x,   cls = \"class\",   rf = list(),   label = NULL,   shape = FALSE,   ellipses = TRUE,   ROC = TRUE,   seed = 1234,   title = \"\",   legendPosition = \"bottom\",   labelSize = 2,   type = c(\"pre-treated\", \"raw\") )"},{"path":"https://jasenfinch.github.io/metabolyseR/reference/plotSupervisedRF.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Supervised random forest MDS plot — plotSupervisedRF","text":"x object class AnalysisData Analysis containing analysis results cls information column use sample classes rf list additional parameters pass randomForest label information column use sample labels. Set NULL labels. shape TRUE/FALSE use shape aesthetic plot points. Defaults TRUE number classes greater 12 ellipses TRUE/FALSE, plot multivariate normal distribution 95% confidence ellipses class ROC receiver-operator characteristics plotted? seed random number seed title plot title legendPosition legend position pass legend.position argument ggplot2::theme. Set \"none\" remove legend. labelSize label size. Ignored label NULL ... arguments pass appropriate method type raw pre-treated data plot","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/plotSupervisedRF.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Supervised random forest MDS plot — plotSupervisedRF","text":"","code":"library(metaboData)  d <- analysisData(abr1$neg[,200:300],abr1$fact)  ## Supervised random forest MDS plot plotSupervisedRF(d,cls = 'day')"},{"path":"https://jasenfinch.github.io/metabolyseR/reference/plotTIC.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot sample total ion counts — plotTIC","title":"Plot sample total ion counts — plotTIC","text":"Plot total ion counts sample data.","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/plotTIC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot sample total ion counts — plotTIC","text":"","code":"plotTIC(analysis, by = \"injOrder\", colour = \"block\", ...)  # S4 method for AnalysisData plotTIC(analysis, by = \"injOrder\", colour = \"block\")  # S4 method for Analysis plotTIC(   analysis,   by = \"injOrder\",   colour = \"block\",   type = c(\"pre-treated\", \"raw\") )"},{"path":"https://jasenfinch.github.io/metabolyseR/reference/plotTIC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot sample total ion counts — plotTIC","text":"analysis S4 object class AnalysisData Analysis information column plot colour information column provide colour labels ... arguments pass appropriate method type raw pre-treated sample data","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/plotTIC.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot sample total ion counts — plotTIC","text":"","code":"library(metaboData)  d <- analysisData(abr1$neg,abr1$fact)  ## Plot sample TIVs plotTIC(d,by = 'injorder',colour = 'day')   plotTIC(d,by = 'day',colour = 'day')"},{"path":"https://jasenfinch.github.io/metabolyseR/reference/plotUnsupervisedRF.html","id":null,"dir":"Reference","previous_headings":"","what":"Unsupervised random forest MDS plot — plotUnsupervisedRF","title":"Unsupervised random forest MDS plot — plotUnsupervisedRF","text":"multidimensional scaling (MDS) plot unsupervised random forest analysis","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/plotUnsupervisedRF.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unsupervised random forest MDS plot — plotUnsupervisedRF","text":"","code":"plotUnsupervisedRF(   x,   cls = \"class\",   rf = list(),   label = NULL,   shape = FALSE,   ellipses = TRUE,   seed = 1234,   title = \"\",   legendPosition = \"bottom\",   labelSize = 2,   ... )  # S4 method for AnalysisData plotUnsupervisedRF(   x,   cls = \"class\",   rf = list(),   label = NULL,   shape = FALSE,   ellipses = TRUE,   seed = 1234,   title = \"\",   legendPosition = \"bottom\",   labelSize = 2 )  # S4 method for Analysis plotUnsupervisedRF(   x,   cls = \"class\",   rf = list(),   label = NULL,   shape = FALSE,   ellipses = TRUE,   seed = 1234,   title = \"\",   legendPosition = \"bottom\",   labelSize = 2,   type = c(\"pre-treated\", \"raw\") )"},{"path":"https://jasenfinch.github.io/metabolyseR/reference/plotUnsupervisedRF.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unsupervised random forest MDS plot — plotUnsupervisedRF","text":"x object class AnalysisData Analysis cls sample information column use sample labelling rf list additional parameters pass randomForest label info column use sample labels. Set NULL labels. shape TRUE/FALSE use shape aesthetic plot points. Defaults TRUE number classes greater 12 ellipses TRUE/FALSE, plot multivariate normal distribution 95% confidence ellipses class seed random number seed title plot title legendPosition legend position pass legend.position argument ggplot2::theme. Set \"none\" remove legend. labelSize label size. Ignored label NULL ... arguments pass appropriate method type raw pre-treated data plot","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/plotUnsupervisedRF.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unsupervised random forest MDS plot — plotUnsupervisedRF","text":"","code":"library(metaboData)  d <- analysisData(abr1$neg[,200:300],abr1$fact)  ## Unsupervised random forest MDS plot plotUnsupervisedRF(d,cls = 'day')"},{"path":"https://jasenfinch.github.io/metabolyseR/reference/pre-treatment-parameters.html","id":null,"dir":"Reference","previous_headings":"","what":"Pre-treatment parameters — preTreatmentElements","title":"Pre-treatment parameters — preTreatmentElements","text":"Return pre-treatment elements, methods parameters.","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/pre-treatment-parameters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pre-treatment parameters — preTreatmentElements","text":"","code":"preTreatmentElements()  preTreatmentMethods(element)  preTreatmentParameters(methods)"},{"path":"https://jasenfinch.github.io/metabolyseR/reference/pre-treatment-parameters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pre-treatment parameters — preTreatmentElements","text":"element pre-treatment element name methods named list element methods","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/pre-treatment-parameters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pre-treatment parameters — preTreatmentElements","text":"","code":"## Return the availalble pre-treatment elements preTreatmentElements() #> [1] \"aggregate\"       \"correction\"      \"impute\"          \"keep\"            #> [5] \"occupancyFilter\" \"QC\"              \"remove\"          \"transform\"        ## Return the available pre-treatment methods for the remove element preTreatmentMethods('remove') #> [1] \"classes\"  \"features\" \"samples\"   ## Define some default pre-treatment parameters p <- preTreatmentParameters(   list(     remove = 'classes',     QC = c('RSDfilter','removeQC'),     transform = 'TICnorm'   ) )  ## Assign the pre-treatment parameters to analysis parameters ap <- analysisParameters('pre-treatment') parameters(ap,'pre-treatment') <- p  print(ap) #> Parameters: #> pre-treatment #> \tremove #> \t\tclasses #> \t\t\tcls = class #> \t\t\tclasses = c() #> \tQC #> \t\tRSDfilter #> \t\t\tcls = class #> \t\t\tQCidx = QC #> \t\t\tRSDthresh = 50 #> \t\tremoveQC #> \t\t\tcls = class #> \t\t\tQCidx = QC #> \ttransform #> \t\tTICnorm #>"},{"path":"https://jasenfinch.github.io/metabolyseR/reference/predict.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict random forest model responses — predict","title":"Predict random forest model responses — predict","text":"Predict values random forest model response variables new data.","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/predict.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict random forest model responses — predict","text":"","code":"predict(   model,   new_data,   idx = NULL,   type = c(\"response\", \"prob\", \"votes\"),   ... )  # S4 method for RandomForest,AnalysisData predict(   model,   new_data,   idx = NULL,   type = c(\"response\", \"prob\", \"votes\"),   ... )"},{"path":"https://jasenfinch.github.io/metabolyseR/reference/predict.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict random forest model responses — predict","text":"model S4 object class RandomForest new_data S4 object class AnalysisData idx sample information column use sample names. NULL, sample row number used. Sample names unique row data. type one response, prob, votes indicate type prediction make ... arguments pass randomForest::predict.randomForest()","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/predict.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Predict random forest model responses — predict","text":"features contained within new_data match features used train model. features() method can used check . argument returnModels = TRUE also used training RandomForest-class object used argument model.","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/predict.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predict random forest model responses — predict","text":"","code":"library(metaboData)  ## Prepare some data x <- analysisData(abr1$neg[,200:300],abr1$fact) %>%   occupancyMaximum(cls = 'day') %>%   transformTICnorm()  ## Extract data from which to train a random forest model training_data <- x %>%    keepClasses(cls = 'day',               classes = c('H','1'))  ## Extract data for which response values will be predicted test_data <- x %>%    keepClasses(cls = 'day',               classes = c('2','3'))  rf <- randomForest(training_data,                    cls = 'day',                    returnModels = TRUE)  predict(rf,         test_data) #> # A tibble: 40 × 5 #>    response comparison   rep sample prediction #>    <chr>    <chr>      <dbl>  <int> <fct>      #>  1 day      1~H            1      1 H          #>  2 day      1~H            1      2 H          #>  3 day      1~H            1      3 H          #>  4 day      1~H            1      4 H          #>  5 day      1~H            1      5 H          #>  6 day      1~H            1      6 H          #>  7 day      1~H            1      7 H          #>  8 day      1~H            1      8 H          #>  9 day      1~H            1      9 H          #> 10 day      1~H            1     10 1          #> # ℹ 30 more rows"},{"path":"https://jasenfinch.github.io/metabolyseR/reference/randomForest.html","id":null,"dir":"Reference","previous_headings":"","what":"Random forest — randomForest","title":"Random forest — randomForest","text":"Perform random forest AnalysisData object","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/randomForest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random forest — randomForest","text":"","code":"randomForest(   x,   cls = \"class\",   rf = list(),   reps = 1,   binary = FALSE,   comparisons = list(),   perm = 0,   returnModels = FALSE,   seed = 1234 )  # S4 method for AnalysisData randomForest(   x,   cls = \"class\",   rf = list(),   reps = 1,   binary = FALSE,   comparisons = list(),   perm = 0,   returnModels = FALSE,   seed = 1234 )"},{"path":"https://jasenfinch.github.io/metabolyseR/reference/randomForest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random forest — randomForest","text":"x S4 object class AnalysisData cls vector sample information columns use response variable information. Set NULL unsupervised. rf named list arguments pass randomForest::randomForest reps number repetitions perform binary TRUE/FALSE binary comparisons performed. Ignored unsupervised regression. Ignored comparisons specified. comparisons list comparisons perform. Ignored unsupervised regression. See details. perm number permutations perform. Ignored unsupervised. returnModels TRUE/FALSE model objects returned. seed random number seed","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/randomForest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random forest — randomForest","text":"S4 object class RandomForest.","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/randomForest.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Random forest — randomForest","text":"Specified class comparisons given list named according cls. Comparisons given class names separated '~' (eg. '1~2~H').","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/randomForest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random forest — randomForest","text":"","code":"library(metaboData)  x <- analysisData(abr1$neg[,200:300],abr1$fact) %>%        occupancyMaximum(cls = 'day') %>%        transformTICnorm()         rf <- randomForest(x,cls = 'day')  plotMDS(rf,cls = 'day')"},{"path":"https://jasenfinch.github.io/metabolyseR/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. future plan magrittr %>%","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/remove.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove samples, classes or features — removeClasses","title":"Remove samples, classes or features — removeClasses","text":"Exclusion samples, classes features AnalysisData object.","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/remove.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove samples, classes or features — removeClasses","text":"","code":"removeClasses(d, cls = \"class\", classes = c())  # S4 method for AnalysisData removeClasses(d, cls = \"class\", classes = c())  removeFeatures(d, features = character())  # S4 method for AnalysisData removeFeatures(d, features = character())  removeSamples(d, idx = \"fileOrder\", samples = c())  # S4 method for AnalysisData removeSamples(d, idx = \"fileOrder\", samples = c())"},{"path":"https://jasenfinch.github.io/metabolyseR/reference/remove.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove samples, classes or features — removeClasses","text":"d S4 object class AnalysisData cls info column use class information classes classes remove features features remove idx info column containing sample indexes samples sample indexes remove","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/remove.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove samples, classes or features — removeClasses","text":"S4 object class AnalysisData samples, classes features removed.","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/remove.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Remove samples, classes or features — removeClasses","text":"removeClasses: Remove classes. removeFeatures: Remove features. removeSamples: Remove samples.","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/remove.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove samples, classes or features — removeClasses","text":"","code":"library(metaboData)  d <- analysisData(abr1$neg[,200:300],abr1$fact)    ## Remove classes  d %>%    removeClasses(cls = 'day',classes = 'H') #>  #> AnalysisData object containing: #>  #> Samples: 100  #> Features: 101  #> Info: 9  #>     ## Remove features  d %>%    removeFeatures(features = c('N200','N201')) #>  #> AnalysisData object containing: #>  #> Samples: 120  #> Features: 99  #> Info: 9  #>     ## Remove samples  d %>%    removeSamples(idx = 'injorder',samples = c(1,10)) #>  #> AnalysisData object containing: #>  #> Samples: 118  #> Features: 101  #> Info: 9  #>"},{"path":"https://jasenfinch.github.io/metabolyseR/reference/roc.html","id":null,"dir":"Reference","previous_headings":"","what":"Receiver-operator characteristic (ROC) curves — roc","title":"Receiver-operator characteristic (ROC) curves — roc","text":"ROC curves --bag random forest predictions.","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/roc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Receiver-operator characteristic (ROC) curves — roc","text":"","code":"roc(x)  # S4 method for RandomForest roc(x)  # S4 method for list roc(x)  # S4 method for Analysis roc(x)"},{"path":"https://jasenfinch.github.io/metabolyseR/reference/roc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Receiver-operator characteristic (ROC) curves — roc","text":"x S4 object class RandomForest, Analysis list","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/roc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Receiver-operator characteristic (ROC) curves — roc","text":"tibble containing ROC curves.","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/roc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Receiver-operator characteristic (ROC) curves — roc","text":"","code":"library(metaboData)  x <- analysisData(abr1$neg[,200:300],abr1$fact) %>%        occupancyMaximum(cls = 'day') %>%        transformTICnorm()         rf <- randomForest(x,cls = 'day')  roc(rf) #> # A tibble: 711 × 6 #>    response comparison  Class .threshold specificity sensitivity #>    <chr>    <chr>       <chr>      <dbl>       <dbl>       <dbl> #>  1 day      1~2~3~4~5~H 1     -Inf            0                1 #>  2 day      1~2~3~4~5~H 1        0            0                1 #>  3 day      1~2~3~4~5~H 1        0.00503      0.0100           1 #>  4 day      1~2~3~4~5~H 1        0.00538      0.0200           1 #>  5 day      1~2~3~4~5~H 1        0.0103       0.0300           1 #>  6 day      1~2~3~4~5~H 1        0.0105       0.0400           1 #>  7 day      1~2~3~4~5~H 1        0.0117       0.0500           1 #>  8 day      1~2~3~4~5~H 1        0.0144       0.0600           1 #>  9 day      1~2~3~4~5~H 1        0.0157       0.0700           1 #> 10 day      1~2~3~4~5~H 1        0.0222       0.0800           1 #> # ℹ 701 more rows"},{"path":"https://jasenfinch.github.io/metabolyseR/reference/rsd.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate feature relative standard deviations — rsd","title":"Calculate feature relative standard deviations — rsd","text":"Calculate relative standard deviation (RSD) percentage values feature per class given sample information column.","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/rsd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate feature relative standard deviations — rsd","text":"","code":"rsd(x, cls = \"class\")  # S4 method for AnalysisData rsd(x, cls = \"class\")"},{"path":"https://jasenfinch.github.io/metabolyseR/reference/rsd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate feature relative standard deviations — rsd","text":"x S4 object class AnalysisData cls sample information column use class structure","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/rsd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate feature relative standard deviations — rsd","text":"tibble containing computed RSD values.","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/rsd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate feature relative standard deviations — rsd","text":"","code":"library(metaboData)  d <- analysisData(abr1$neg[,200:300],abr1$fact)  rsd(d,cls = 'day') #> # A tibble: 606 × 5 #>    day   Feature   Mean    SD   RSD #>    <fct> <chr>    <dbl> <dbl> <dbl> #>  1 1     N200    0.224  1.00  447.  #>  2 1     N201    0.228  0.946 415.  #>  3 1     N202    0.0538 0.151 280.  #>  4 1     N203    1.34   1.03   76.5 #>  5 1     N204    0.0833 0.202 242.  #>  6 1     N205    1.55   2.29  148.  #>  7 1     N206    0.112  0.360 320.  #>  8 1     N207    0.220  0.396 180.  #>  9 1     N208    0.124  0.225 182.  #> 10 1     N209    1.37   2.03  148.  #> # ℹ 596 more rows"},{"path":"https://jasenfinch.github.io/metabolyseR/reference/split.html","id":null,"dir":"Reference","previous_headings":"","what":"Split an AnalysisData object — split","title":"Split an AnalysisData object — split","text":"Split object class AnalysisData list based class grouping variable.","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/split.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split an AnalysisData object — split","text":"","code":"split(x, cls = \"class\")  # S4 method for AnalysisData split(x, cls = \"class\")"},{"path":"https://jasenfinch.github.io/metabolyseR/reference/split.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split an AnalysisData object — split","text":"x S4 object class AnalysisData cls sample information column use splitting","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/split.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split an AnalysisData object — split","text":"list AnalysisData objects.","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/split.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split an AnalysisData object — split","text":"","code":"library(metaboData)  d <- analysisData(abr1$neg,abr1$fact)  ## Split the data set based on the 'day' class information column d <- split(d,cls = 'day')  print(d) #> $`1` #>  #> AnalysisData object containing: #>  #> Samples: 20  #> Features: 2000  #> Info: 9  #>  #>  #> $`2` #>  #> AnalysisData object containing: #>  #> Samples: 20  #> Features: 2000  #> Info: 9  #>  #>  #> $`3` #>  #> AnalysisData object containing: #>  #> Samples: 20  #> Features: 2000  #> Info: 9  #>  #>  #> $`4` #>  #> AnalysisData object containing: #>  #> Samples: 20  #> Features: 2000  #> Info: 9  #>  #>  #> $`5` #>  #> AnalysisData object containing: #>  #> Samples: 20  #> Features: 2000  #> Info: 9  #>  #>  #> $H #>  #> AnalysisData object containing: #>  #> Samples: 20  #> Features: 2000  #> Info: 9  #>  #>"},{"path":"https://jasenfinch.github.io/metabolyseR/reference/transform.html","id":null,"dir":"Reference","previous_headings":"","what":"Scaling, transformation and normalisation methods — transformArcSine","title":"Scaling, transformation and normalisation methods — transformArcSine","text":"Methods data scaling, transformation normalisation.","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/transform.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scaling, transformation and normalisation methods — transformArcSine","text":"","code":"transformArcSine(d)  # S4 method for AnalysisData transformArcSine(d)  transformAuto(d)  # S4 method for AnalysisData transformAuto(d)  transformCenter(d)  # S4 method for AnalysisData transformCenter(d)  transformLevel(d)  # S4 method for AnalysisData transformLevel(d)  transformLn(d, add = 1)  # S4 method for AnalysisData transformLn(d, add = 1)  transformLog10(d, add = 1)  # S4 method for AnalysisData transformLog10(d, add = 1)  transformPareto(d)  # S4 method for AnalysisData transformPareto(d)  transformRange(d)  # S4 method for AnalysisData transformRange(d)  transformSQRT(d)  # S4 method for AnalysisData transformSQRT(d)  transformTICnorm(d)  # S4 method for AnalysisData transformTICnorm(d)  transformVast(d)  # S4 method for AnalysisData transformVast(d)"},{"path":"https://jasenfinch.github.io/metabolyseR/reference/transform.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scaling, transformation and normalisation methods — transformArcSine","text":"d S4 object class AnalysisData add value add prior transformation","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/transform.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scaling, transformation and normalisation methods — transformArcSine","text":"S4 object class AnalysisData containing transformed data.","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/transform.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Scaling, transformation and normalisation methods — transformArcSine","text":"Prior downstream analyses, metabolomics data often require transformation fulfil assumptions particular statistical/data mining technique. applying transformation, important consider effects transformation data, can greatly effect outcome downstream analyses. also important consider stage pre-treatment routine transformation applied introduce artefacts data. best practice apply transformation last pre-treatment routine steps taken. wide range transformation methods available commonly used analysis metabolomics data.","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/transform.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Scaling, transformation and normalisation methods — transformArcSine","text":"transformArcSine: Arc-sine transformation. transformAuto: Auto scaling. transformCenter: Mean centring. transformLevel: Level scaling. transformLn: Natural logarithmic transformation. transformLog10: Logarithmic transformation. transformPareto: Pareto scaling. transformRange: Range scaling. Also known min-max scaling. transformSQRT: Square root transformation. transformTICnorm: Total ion count normalisation. transformVast: Vast scaling.","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/transform.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Scaling, transformation and normalisation methods — transformArcSine","text":"","code":"## Each of the following examples shows the application of the transformation and then  ## a Linear Discriminant Analysis is plotted to show it's effect on the data structure.  ## Initial example data preparation library(metaboData)  d <- analysisData(abr1$neg[,200:300],abr1$fact) %>%   occupancyMaximum(occupancy = 2/3)  d %>%   plotLDA(cls = 'day')     ## Arc-sine transformation d %>%   transformArcSine() %>%   plotLDA(cls = 'day')   ## Auto scaling d %>%   transformAuto() %>%   plotLDA(cls = 'day')   ## Mean centring d %>%   transformCenter()%>%   plotLDA(cls = 'day')   ## Level scaling d %>%   transformLevel() %>%   plotLDA(cls = 'day')   ## Natural logarithmic transformation d %>%   transformLn() %>%   plotLDA(cls = 'day')   ## Logarithmic transformation d %>%   transformLog10()%>%   plotLDA(cls = 'day')   ## Pareto scaling d %>%   transformPareto() %>%   plotLDA(cls = 'day')   ## Range scaling d %>%   transformRange() %>%   plotLDA(cls = 'day')   ## Square root scaling d %>%   transformSQRT() %>%   plotLDA(cls = 'day')   ## Total ion count nromalisation d %>%   transformTICnorm() %>%   plotLDA(cls = 'day')   ## Vast scaling d %>%   transformVast() %>%   plotLDA(cls = 'day')"},{"path":"https://jasenfinch.github.io/metabolyseR/reference/ttest.html","id":null,"dir":"Reference","previous_headings":"","what":"Welch's t-test — ttest","title":"Welch's t-test — ttest","text":"Welch's t-test","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/ttest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Welch's t-test — ttest","text":"","code":"ttest(   x,   cls = \"class\",   pAdjust = \"bonferroni\",   comparisons = list(),   returnModels = FALSE )  # S4 method for AnalysisData ttest(   x,   cls = \"class\",   pAdjust = \"bonferroni\",   comparisons = list(),   returnModels = FALSE )"},{"path":"https://jasenfinch.github.io/metabolyseR/reference/ttest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Welch's t-test — ttest","text":"x S4 object class AnalysisData cls vector sample information column names analyse pAdjust p value adjustment method comparisons named list binary comparisons analyse returnModels models returned","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/ttest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Welch's t-test — ttest","text":"S4 object class Univariate.","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/ttest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Welch's t-test — ttest","text":"","code":"library(metaboData)  d <- analysisData(abr1$neg[,200:300],abr1$fact) %>%   keepClasses(cls = 'day',classes = c('H','5'))  ## Perform t-test ttest_analysis <- ttest(d,cls = 'day')  ## Extract significant features explanatoryFeatures(ttest_analysis) #> # A tibble: 11 × 14 #>    response comparison feature estimate estimate1 estimate2 statistic    p.value #>    <chr>    <chr>      <chr>      <dbl>     <dbl>     <dbl>     <dbl>      <dbl> #>  1 day      5~H        N277       65.4      79.2     13.8        7.77    1.58e-7 #>  2 day      5~H        N299        7.68      8.99     1.31       6.36    2.53e-6 #>  3 day      5~H        N229       50.3      55.2      4.93       5.96    8.60e-6 #>  4 day      5~H        N295        4.19      5.12     0.937      5.56    8.65e-6 #>  5 day      5~H        N233       -4.65      2.68     7.33      -5.00    1.69e-5 #>  6 day      5~H        N267       27.3      48.1     20.8        4.79    2.96e-5 #>  7 day      5~H        N245       18.0      19.9      1.94       4.92    9.00e-5 #>  8 day      5~H        N279        7.64      9.21     1.57       4.61    1.63e-4 #>  9 day      5~H        N278        4.14      6.27     2.12       4.45    1.76e-4 #> 10 day      5~H        N281        3.02      3.72     0.701      4.47    1.92e-4 #> 11 day      5~H        N272        2.99      3.71     0.722      4.30    2.49e-4 #> # ℹ 6 more variables: parameter <dbl>, conf.low <dbl>, conf.high <dbl>, #> #   method <chr>, alternative <chr>, adjusted.p.value <dbl>"},{"path":"https://jasenfinch.github.io/metabolyseR/reference/tune.html","id":null,"dir":"Reference","previous_headings":"","what":"Tune random forest parameters — tune","title":"Tune random forest parameters — tune","text":"Tune mtry ntree random forest parameters using grid search approach.","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/tune.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tune random forest parameters — tune","text":"","code":"tune(   x,   cls = \"class\",   mtry_range = floor(seq(mtry(x, cls = cls) - mtry(x, cls = cls)/2, mtry(x, cls = cls) +     mtry(x, cls = cls)/2, length.out = 4)),   ntree_range = 1000,   seed = 1234 )  # S4 method for AnalysisData tune(   x,   cls = \"class\",   mtry_range = floor(seq(mtry(x, cls = cls) - mtry(x, cls = cls)/2, mtry(x, cls = cls) +     mtry(x, cls = cls)/2, length.out = 4)),   ntree_range = 1000,   seed = 1234 )"},{"path":"https://jasenfinch.github.io/metabolyseR/reference/tune.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tune random forest parameters — tune","text":"x S4 object class AnalysisData cls sample information column use mtry_range numeric vector mtry values search ntree_range numeric vector ntree values search seed random number seed","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/tune.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tune random forest parameters — tune","text":"list containing optimal mtry ntree parameters. suitable use rf argument method randomForest().","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/tune.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Tune random forest parameters — tune","text":"Parameter tuning performed grid search combinations mtry_range ntree_range vectors provided. optimal parameter values selected using --bag error estimates margin metric classification rmse (root-mean-square error) metric regression.","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/reference/tune.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tune random forest parameters — tune","text":"","code":"library(metaboData)  ## Prepare some data x <- analysisData(abr1$neg[,200:300],abr1$fact) %>%   occupancyMaximum(cls = 'day') %>%   transformTICnorm()  ## Tune the `mtry` parameter for the `day` response tune(x,cls = 'day') #> $mtry #> [1] 9 #>  #> $ntree #> [1] 1000 #>"},{"path":"https://jasenfinch.github.io/metabolyseR/news/index.html","id":"metabolyser-0151","dir":"Changelog","previous_headings":"","what":"metabolyseR 0.15.1","title":"metabolyseR 0.15.1","text":"class occupancy methods now throw helpful error message features available compute class occupancy. Fixed bug possible customize order class labels legend plotLDA().","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/news/index.html","id":"metabolyser-0150","dir":"Changelog","previous_headings":"","what":"metabolyseR 0.15.0","title":"metabolyseR 0.15.0","text":"now possible specify multiple cls arguments aggregation methods. Correlation thresholds now available coefficient total number using minCoef maxCor arguments correlations() method. Added predictions() accessor method RandomForest S4 class enable retrieval bag model response predictions. occupancy filtering methods now error value supplied argument occupancy non-numeric. Memory usage performance improvements randomForest() method. Added type() response() methods Univariate S4 class. plotLDA() now returns warning skips plotting error encountered PC-LDA. value pre-treated now default argument type Analysis S4 class accessor methods. Added value argument explanatoryFeatures() method allow specification importance value apply specified threshold. specified cls argument now correctly displayed x-axis title resulting plots plotFeature() method.","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/news/index.html","id":"metabolyser-01410","dir":"Changelog","previous_headings":"","what":"metabolyseR 0.14.10","title":"metabolyseR 0.14.10","text":"Added method predict() RandomForest S4 class predict model response values. Added method mtry() AnalysisData S4 class return default mtry random forest parameter given response variable. Added method tune() AnalysisData S4 class tune random forest parameters mtry ntree given response variable.","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/news/index.html","id":"metabolyser-0149","dir":"Changelog","previous_headings":"","what":"metabolyseR 0.14.9","title":"metabolyseR 0.14.9","text":"Suppressed name repair console message encountered random forest permutation testing. Added proximity() method extracting sample proximities RandomForest S4 class. Added mds() method perform multidimensional scaling sample proximities RandomForest S4 class. Added roc() method calculate receiver-operator characteristic curves RandomForest S4 class.","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/news/index.html","id":"metabolyser-0148","dir":"Changelog","previous_headings":"","what":"metabolyseR 0.14.8","title":"metabolyseR 0.14.8","text":"error now thrown random forest classification less two classes specified. plotSupervisedRF() now skips plotting errors encountered random forest training.","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/news/index.html","id":"metabolyser-0147","dir":"Changelog","previous_headings":"","what":"metabolyseR 0.14.7","title":"metabolyseR 0.14.7","text":"Single replicate classes now automatically removed plotLDA().","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/news/index.html","id":"metabolyser-0146","dir":"Changelog","previous_headings":"","what":"metabolyseR 0.14.6","title":"metabolyseR 0.14.6","text":"plotExplanatoryHeatmap() method Analysis class now returns plot number plots equal 1. Removed reference nCores parameter documentation example metabolyse().","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/news/index.html","id":"metabolyser-0145","dir":"Changelog","previous_headings":"","what":"metabolyseR 0.14.5","title":"metabolyseR 0.14.5","text":"Correlation analysis results now include absolute correlation coefficient column results also arranged descending order.","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/news/index.html","id":"metabolyser-0144","dir":"Changelog","previous_headings":"","what":"metabolyseR 0.14.4","title":"metabolyseR 0.14.4","text":"Console output imputeAll() now suppressed.","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/news/index.html","id":"metabolyser-0143","dir":"Changelog","previous_headings":"","what":"metabolyseR 0.14.3","title":"metabolyseR 0.14.3","text":"Temporarily added jasenfinch/missForest remote stekhoven/missForest pull request #25 resolved. limit number plotted features plotExplanatoryHeatmap can now specified using featureLimit argument. plotExplanatoryHeatmap() now returns NULL returns message explanatory features found. Fixed alignment dendrogram branches heat map rows plotExplanatoryHeatmap(). Fixed ggplot2::guides() warning plotFeature() plotTIC(). Fixed bug explanatoryFeatures() methods Analysis class lists threshold applied. Fixed error plotRSD() method Analysis class. Corrected text modelling vignette concerning results using unsupervised random forest outlier detection.","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/news/index.html","id":"metabolyser-0142","dir":"Changelog","previous_headings":"","what":"metabolyseR 0.14.2","title":"metabolyseR 0.14.2","text":"Package version, creation date verbose argument added prototype Analysis class. generics now defined standard generics. Added metrics method Analysis class. metrics method lists now ignores list elements class RandomForest.","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/news/index.html","id":"metabolyser-0141","dir":"Changelog","previous_headings":"","what":"metabolyseR 0.14.1","title":"metabolyseR 0.14.1","text":"Changed RSDthresh argument default 50% instead 0.5% QCrsdFilter generic.","code":""},{"path":"https://jasenfinch.github.io/metabolyseR/news/index.html","id":"metabolyser-0140","dir":"Changelog","previous_headings":"","what":"metabolyseR 0.14.0","title":"metabolyseR 0.14.0","text":"Added NEWS.md file track changes package. pkgdown site now available https://jasenfinch.github.io/metabolyseR/. Bug reports issues URL https://github.com/jasenfinch/metabolyseR/issues added package DESCRIPTION. Dedicated vignettes now available quick start example analysis, data pre-treatment data modelling. Function examples added documentation pages. Unit test coverage increased > 95%. Parallel processing now implemented using future package. plan() future package re-exported. RandomForest Univariate classes now inherit class AnalysisData class. Improvements plot theme aesthetics. type argument added plotPCA(), plotLDA(), plotUnsupervisedRF() plotSupervisedRF() methods Analysis class. \"pre-treated\" specifying type argument Analysis class methods now used \"preTreated\" Added clsRename() method renaming class information columns. plotMeasures() method renamed plotMetrics(). Added plotMDS(), plotImportance() plotMetrics() methods lists RandomForest class objects. Added plotExplanatoryHeatmap() method lists RandomForest Univariate class objects. Renamed keepVariables() removeVariables() methods keepFeatures() removeFeatures(). Added helper functions preTreatmentElements(), preTreatmentMethods() preTreatParameters() declaring pre-treatment parameters AnalysisParameters class. Added helper functions modellingMethods() modellingParameters() declaring modelling parameters AnalysisParameters class. Added helper function correlationsParameters() declaring correlations parameters AnalysisParameters class. Added binaryComparisons() method retrieving possible binary class comparisons AnalysisData class object. changeParameter() now assigns parameter values direct assignment. Added analysisResults() method extracting analysis elements results Analysis class. Added exportParameters() method exporting analysis parameters YAML file format. Added dat() sinfo() accessor methods Analysis class. Relative standard deviation (RSD) values now specified returned percentages.","code":""}]
