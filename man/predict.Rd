% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/predict.R
\name{predict}
\alias{predict}
\alias{predict,RandomForest,AnalysisData-method}
\title{Predict random forest model responses}
\usage{
predict(
  model,
  new_data,
  idx = NULL,
  type = c("response", "prob", "votes"),
  ...
)

\S4method{predict}{RandomForest,AnalysisData}(
  model,
  new_data,
  idx = NULL,
  type = c("response", "prob", "votes"),
  ...
)
}
\arguments{
\item{model}{S4 object of class \code{RandomForest}}

\item{new_data}{S4 object of class \code{AnalysisData}}

\item{idx}{sample information column to use for sample names. If \code{NULL}, the sample row number will be used. Sample names should be unique for each row of data.}

\item{type}{one of \code{response}, \code{prob}, or \code{votes} to indicate the type of prediction to make}

\item{...}{arguments to pass to \code{randomForest::predict.randomForest()}}
}
\description{
Predict values of random forest model response variables from new data.
}
\details{
The features contained within \code{new_data} should match those of the features used to train \code{model}.
The \code{features()} method can be used to check this.
The argument \code{returnModels = TRUE} should also be used when training the \code{RandomForest-class} object used for argument \code{model}.
}
\examples{
library(metaboData)

## Prepare some data
x <- analysisData(abr1$neg[,200:300],abr1$fact) \%>\%
  occupancyMaximum(cls = 'day') \%>\%
  transformTICnorm()

## Extract data from which to train a random forest model
training_data <- x \%>\% 
  keepClasses(cls = 'day',
              classes = c('H','1'))

## Extract data for which response values will be predicted
test_data <- x \%>\% 
  keepClasses(cls = 'day',
              classes = c('2','3'))

rf <- randomForest(training_data,
                   cls = 'day',
                   returnModels = TRUE)

predict(rf,
        test_data)
}
